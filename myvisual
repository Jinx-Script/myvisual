--// Services
local Players = game:GetService("Players")
local CollectionService = game:GetService("CollectionService")
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local UserInputService = game:GetService('UserInputService')
local TweenService = game:GetService('TweenService')
local HttpService = game:GetService('HttpService')
local CoreGui = game:GetService('CoreGui')

--// Constants
local LocalPlayer = Players.LocalPlayer
local UPDATE_INTERVAL = 1 -- seconds. How often to update the text. Higher is better for performance.
local Mouse = LocalPlayer:GetMouse()

--// Inventory Helper Functions
local DataService = require(ReplicatedStorage.Modules.DataService)

-- Function to get all inventory items
local function GetAllInventoryItems()
    local inventoryData = DataService:GetData().InventoryData
    
    if not inventoryData then
        warn("No inventory data found!")
        return {}
    end
    
    local allItems = {}
    
    -- Iterate through all inventory items
    for itemUUID, itemData in pairs(inventoryData) do
        table.insert(allItems, {
            UUID = itemUUID,
            ItemType = itemData.ItemType,
            ItemData = itemData.ItemData,
            FullData = itemData
        })
    end
    
    return allItems
end

-- Function to get inventory items by type
local function GetInventoryItemsByType(itemType)
    local inventoryData = DataService:GetData().InventoryData
    
    if not inventoryData then
        warn("No inventory data found!")
        return {}
    end
    
    local filteredItems = {}
    
    for itemUUID, itemData in pairs(inventoryData) do
        if itemData.ItemType == itemType then
            table.insert(filteredItems, {
                UUID = itemUUID,
                ItemType = itemData.ItemType,
                ItemData = itemData.ItemData,
                FullData = itemData
            })
        end
    end
    
    return filteredItems
end

-- Function to print all inventory items (for debugging)
local function PrintAllInventoryItems()
    local items = GetAllInventoryItems()
    
  --  print("=== LOCAL PLAYER INVENTORY ===")
   -- print("Total items:", #items)
    
    for i, item in ipairs(items) do
        ---print(string.format("[%d] %s (UUID: %s)", i, item.ItemType, item.UUID))
        if item.ItemData then
            for key, value in pairs(item.ItemData) do
                --print(string.format("  - %s: %s", key, tostring(value)))
            end
        end
        --print("---")
    end
end

-- Function to generate a unique UUID (simple version)
local function GenerateUUID()
    local chars = "0123456789abcdef"
    local uuid = ""
    for i = 1, 32 do
        local rand = math.random(1, #chars)
        uuid = uuid .. chars:sub(rand, rand)
        if i == 8 or i == 12 or i == 16 or i == 20 then
            uuid = uuid .. "-"
        end
    end
    return uuid
end

-- Function to randomize pet weight (if it's a pet item)
local function RandomizePetWeight(tool)
    local success = pcall(function()
        -- Check if this is a pet item using multiple detection methods
        local isPet = false
        local currentWeight = nil
        
        -- Method 1: Check for PetTargettable tag
        if tool:GetAttribute("PetTargettable") or tool:HasTag("PetTargettable") or tool:HasTag("PetModel") then
            isPet = true
        end
        
        -- Method 2: Check if tool name contains (kg) - like TooltipUpdater does
        if not isPet and string.find(tool.Name, "%(kg%)") then
            isPet = true
        end
        
        -- Method 3: Check if tool name matches any pet in egg_possibilities_data
        if not isPet then
            for eggType, petList in pairs(egg_possibilities_data) do
                for _, petName in ipairs(petList) do
                    if tool.Name == petName or string.find(tool.Name, petName) then
                        isPet = true
                        break
                    end
                end
                if isPet then break end
            end
        end
        
        -- Method 4: Check for weight attributes (fallback)
        local weightAttributes = {"Weight", "PetWeight", "weight", "WEIGHT", "ItemWeight", "KG"}
        for _, attrName in ipairs(weightAttributes) do
            if tool:GetAttribute(attrName) then
                currentWeight = tool:GetAttribute(attrName)
                if not isPet then isPet = true end -- If has weight, likely a pet
                break
            end
        end
        
        -- If we identified this as a pet, randomize weight
        if isPet then
            if not currentWeight then
                -- Extract weight from name if it contains (kg)
                local weightMatch = string.match(tool.Name, "%(([%d%.]+)kg%)") or string.match(tool.Name, "%[([%d%.]+) KG%]")
                if weightMatch then
                    currentWeight = tonumber(weightMatch)
                else
                    -- If no weight found, assign a random starting weight
                    currentWeight = math.random(1, 10)
                end
            end
            
            -- Randomize weight: min = current, max = current + 2
            local newWeight = math.random(currentWeight, currentWeight + 2)
            
            -- Set the new weight using all possible attribute names
            for _, attrName in ipairs(weightAttributes) do
                tool:SetAttribute(attrName, newWeight)
            end
            
            -- Update the tool name to reflect new weight (like TooltipUpdater expects)
            local baseName = tool.Name
            -- Remove existing weight from name
            baseName = string.gsub(baseName, "%s*%(.-kg%)", "")
            baseName = string.gsub(baseName, "%s*%[.-KG%]", "")
            -- Add new weight to name
            tool.Name = baseName .. " (" .. string.format("%.2f", newWeight) .. "kg)"
            
            -- Update tooltip to match name (like TooltipUpdater does)
            tool.ToolTip = tool.Name
            
            -- Also set PetTargettable tag if not already present
            if not tool:GetAttribute("PetTargettable") then
                tool:SetAttribute("PetTargettable", true)
            end
            
            print("🎲 Pet weight randomized: " .. string.format("%.2f", currentWeight) .. "kg → " .. string.format("%.2f", newWeight) .. "kg (" .. baseName .. ")")
            
            -- Apply weight to pet model if it exists
            local handle = tool:FindFirstChild("Handle")
            if handle then
                -- Store weight in handle for pet model reference
                handle:SetAttribute("PetWeight", newWeight)
                handle:SetAttribute("Weight", newWeight)
                handle:SetAttribute("PetTargettable", true)
                
                -- If there's a pet model inside, update its weight too
                for _, child in pairs(handle:GetChildren()) do
                    if child:IsA("Model") or child:IsA("MeshPart") then
                        child:SetAttribute("Weight", newWeight)
                        child:SetAttribute("PetWeight", newWeight)
                        child:SetAttribute("PetTargettable", true)
                    end
                end
            end
            
            return true
        end
        
        return false
    end)
    
    return success
end

-- Function to create a visual clone tool that appears in native inventory
local function CreateVisualCloneTool(originalTool)
    local success, clonedTool = pcall(function()
        -- Create a new Tool instance
        local newTool = Instance.new("Tool")
        
        -- Copy ALL properties to make it identical to original
        newTool.Name = originalTool.Name
        newTool.TextureId = originalTool.TextureId
        newTool.ToolTip = originalTool.ToolTip or originalTool.Name
        newTool.RequiresHandle = originalTool.RequiresHandle
        newTool.ManualActivationOnly = originalTool.ManualActivationOnly
        newTool.CanBeDropped = originalTool.CanBeDropped
        newTool.Enabled = originalTool.Enabled
        
        -- Copy all attributes from original (no clone indicators)
        for attrName, attrValue in pairs(originalTool:GetAttributes()) do
            newTool:SetAttribute(attrName, attrValue)
        end
        
        -- Generate new UUID to avoid conflicts
        newTool:SetAttribute("ITEM_UUID", GenerateUUID())
        
        -- Copy the Handle and all children to make it identical
        local originalHandle = originalTool:FindFirstChild("Handle")
        if originalHandle then
            local newHandle = originalHandle:Clone()
            newHandle.Parent = newTool
            
            -- Copy all children including animations, scripts, etc.
            for _, child in pairs(originalTool:GetChildren()) do
                if child ~= originalHandle then
                    local clonedChild = child:Clone()
                    clonedChild.Parent = newTool
                end
            end
        else
            -- Create a basic handle if none exists
            local handle = Instance.new("Part")
            handle.Name = "Handle"
            handle.Size = Vector3.new(1, 1, 4)
            handle.Material = Enum.Material.Plastic
            handle.Color = Color3.fromRGB(163, 162, 165)
            handle.CanCollide = false
            handle.Parent = newTool
            
            -- Still copy non-handle children (animations, scripts, etc.)
            for _, child in pairs(originalTool:GetChildren()) do
                local clonedChild = child:Clone()
                clonedChild.Parent = newTool
            end
        end
        
        -- Randomize pet weight if this is a pet item (AFTER copying everything)
        RandomizePetWeight(newTool)
        
        return newTool
    end)
    
    if success then
        return clonedTool
    else
        warn("Failed to create visual clone tool:", clonedTool)
        return nil
    end
end

-- Function to clone held item and add to native inventory visually
local function CloneHeldItemToInventory()
    local character = LocalPlayer.Character
    if not character then
       -- warn("❌ No character found!")
        return false
    end
    
    -- Get the currently held tool
    local heldTool = character:FindFirstChildOfClass("Tool")
    if not heldTool then
        --warn("❌ No tool currently held!")
        return false
    end
    
   -- print("🔧 Cloning held item:", heldTool.Name)
    
    -- Create a visual clone tool
    local clonedTool = CreateVisualCloneTool(heldTool)
    if not clonedTool then
       -- warn("❌ Failed to create cloned tool")
        return false
    end
    
    -- Add the cloned tool to the player's Backpack
    -- This will make it appear in the native inventory automatically
    local success = pcall(function()
        clonedTool.Parent = LocalPlayer.Backpack
    end)
    
    if success then
       -- print("✅ Successfully cloned item to native inventory!")
      --  print("  📋 Item Name: [CLONED] " .. heldTool.Name)
       -- print("  🆔 Clone UUID:", clonedTool:GetAttribute("ITEM_UUID"))
      --  print("  ⏰ Clone Time:", os.date("%H:%M:%S", clonedTool:GetAttribute("CLONE_TIME")))
       -- print("  🎒 Check your inventory - the cloned item should appear!")
       -- print("  💡 The cloned item has a green glow to distinguish it from the original")
        return true
    else
        warn("❌ Failed to add cloned tool to Backpack")
        if clonedTool then
            clonedTool:Destroy()
        end
        return false
    end
end

local UI = {}
local espEnabled = true
local currentTab = "Main"

-- Create the main UI
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "Ewan HUB"
screenGui.Parent = CoreGui
screenGui.ResetOnSpawn = false

-- Main window frame
local mainFrame = Instance.new("Frame")
mainFrame.Size = UDim2.new(0, 600, 0, 400)
mainFrame.Position = UDim2.new(0.5, -350, 0.5, -225)
mainFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
mainFrame.BorderSizePixel = 0
mainFrame.Active = true
mainFrame.Draggable = true
mainFrame.Parent = screenGui

local mainCorner = Instance.new("UICorner")
mainCorner.CornerRadius = UDim.new(0, 12)
mainCorner.Parent = mainFrame

-- Title bar
local titleBar = Instance.new("Frame")
titleBar.Size = UDim2.new(1, 0, 0, 45)
titleBar.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
titleBar.BorderSizePixel = 0
titleBar.Parent = mainFrame

local titleCorner = Instance.new("UICorner")
titleCorner.CornerRadius = UDim.new(0, 12)
titleCorner.Parent = titleBar

-- Fix corners for title bar
local titleCornerFix = Instance.new("Frame")
titleCornerFix.Size = UDim2.new(1, 0, 0, 12)
titleCornerFix.Position = UDim2.new(0, 0, 1, -12)
titleCornerFix.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
titleCornerFix.BorderSizePixel = 0
titleCornerFix.Parent = titleBar

-- Title text
local titleText = Instance.new("TextLabel")
titleText.Size = UDim2.new(1, -100, 1, 0)
titleText.Position = UDim2.new(0, 20, 0, 0)
titleText.BackgroundTransparency = 1
titleText.Text = "Ewan Hub"
titleText.TextColor3 = Color3.fromRGB(255, 255, 255)
titleText.TextSize = 18
titleText.Font = Enum.Font.GothamBold
titleText.TextXAlignment = Enum.TextXAlignment.Left
titleText.Parent = titleBar

-- Close button
local closeButton = Instance.new("TextButton")
closeButton.Size = UDim2.new(0, 30, 0, 30)
closeButton.Position = UDim2.new(1, -40, 0, 7.5)
closeButton.BackgroundColor3 = Color3.fromRGB(255, 70, 70)
closeButton.Text = "×"
closeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
closeButton.TextSize = 18
closeButton.Font = Enum.Font.GothamBold
closeButton.Parent = titleBar

local closeCorner = Instance.new("UICorner")
closeCorner.CornerRadius = UDim.new(0, 6)
closeCorner.Parent = closeButton

closeButton.MouseButton1Click:Connect(function()
    screenGui:Destroy()
end)

-- Minimize button
local minimizeButton = Instance.new("TextButton")
minimizeButton.Size = UDim2.new(0, 30, 0, 30)
minimizeButton.Position = UDim2.new(1, -80, 0, 7.5)
minimizeButton.BackgroundColor3 = Color3.fromRGB(255, 193, 7)
minimizeButton.Text = "−"
minimizeButton.TextColor3 = Color3.fromRGB(0, 0, 0)
minimizeButton.TextSize = 18
minimizeButton.Font = Enum.Font.GothamBold
minimizeButton.Parent = titleBar

local minimizeCorner = Instance.new("UICorner")
minimizeCorner.CornerRadius = UDim.new(0, 6)
minimizeCorner.Parent = minimizeButton



-- Sidebar
local sidebar = Instance.new("Frame")
sidebar.Size = UDim2.new(0, 150, 1, -40)
sidebar.Position = UDim2.new(0, 0, 0, 45)
sidebar.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
sidebar.BorderSizePixel = 0
sidebar.Parent = mainFrame

local sidebarCorner = Instance.new("UICorner")
sidebarCorner.CornerRadius = UDim.new(0, 0)
sidebarCorner.Parent = sidebar

-- Sidebar list
local sidebarList = Instance.new("UIListLayout")
sidebarList.FillDirection = Enum.FillDirection.Vertical
sidebarList.SortOrder = Enum.SortOrder.LayoutOrder
sidebarList.Padding = UDim.new(0, 2)
sidebarList.Parent = sidebar

local isMinimized = false
minimizeButton.MouseButton1Click:Connect(function()
    isMinimized = not isMinimized
    if isMinimized then
        -- Minimize: Hide sidebar and content, show only title bar
        TweenService:Create(mainFrame, TweenInfo.new(0.3), {Size = UDim2.new(0, 700, 0, 45)}):Play()
        TweenService:Create(sidebar, TweenInfo.new(0.3), {Size = UDim2.new(0, 180, 0, 0)}):Play()
        TweenService:Create(contentFrame, TweenInfo.new(0.3), {Size = UDim2.new(1, -180, 0, 0)}):Play()
        minimizeButton.Text = "+"
        sidebar.Visible = false
        contentFrame.Visible = false
    else
        -- Restore: Show sidebar and content
        TweenService:Create(mainFrame, TweenInfo.new(0.3), {Size = UDim2.new(0, 700, 0, 450)}):Play()
        TweenService:Create(sidebar, TweenInfo.new(0.3), {Size = UDim2.new(0, 180, 1, -45)}):Play()
        TweenService:Create(contentFrame, TweenInfo.new(0.3), {Size = UDim2.new(1, -180, 1, -45)}):Play()
        minimizeButton.Text = "−"
        sidebar.Visible = true
        contentFrame.Visible = true
    end
end)
-- Content area
local contentFrame = Instance.new("ScrollingFrame")
contentFrame.Size = UDim2.new(1, -150, 1, -40)
contentFrame.Position = UDim2.new(0, 180, 0, 45)
contentFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
contentFrame.BorderSizePixel = 0
contentFrame.ScrollBarThickness = 6
contentFrame.ScrollBarImageColor3 = Color3.fromRGB(255, 70, 70)
contentFrame.Parent = mainFrame

local contentCorner = Instance.new("UICorner")
contentCorner.CornerRadius = UDim.new(0, 0)
contentCorner.Parent = contentFrame

-- Content header
local contentHeader = Instance.new("Frame")
contentHeader.Size = UDim2.new(1, 0, 0, 50)
contentHeader.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
contentHeader.BorderSizePixel = 0
contentHeader.Parent = contentFrame

local contentHeaderTitle = Instance.new("TextLabel")
contentHeaderTitle.Size = UDim2.new(1, -20, 1, 0)
contentHeaderTitle.Position = UDim2.new(0, 20, 0, 0)
contentHeaderTitle.BackgroundTransparency = 1
contentHeaderTitle.Text = "Main"
contentHeaderTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
contentHeaderTitle.TextSize = 20
contentHeaderTitle.Font = Enum.Font.GothamBold
contentHeaderTitle.TextXAlignment = Enum.TextXAlignment.Left
contentHeaderTitle.Parent = contentHeader

-- Content body
local contentBody = Instance.new("Frame")
contentBody.Size = UDim2.new(1, 0, 1, -50)
contentBody.Position = UDim2.new(0, 0, 0, 50)
contentBody.BackgroundTransparency = 1
contentBody.Parent = contentFrame

local contentBodyList = Instance.new("UIListLayout")
contentBodyList.FillDirection = Enum.FillDirection.Vertical
contentBodyList.SortOrder = Enum.SortOrder.LayoutOrder
contentBodyList.Padding = UDim.new(0, 15)
contentBodyList.Parent = contentBody

local contentBodyPadding = Instance.new("UIPadding")
contentBodyPadding.PaddingTop = UDim.new(0, 20)
contentBodyPadding.PaddingLeft = UDim.new(0, 20)
contentBodyPadding.PaddingRight = UDim.new(0, 20)
contentBodyPadding.Parent = contentBody

-- Mobile button
local mobileButton = Instance.new("TextButton")
mobileButton.Size = UDim2.new(0, 60, 0, 60)
mobileButton.Position = UDim2.new(0, 20, 1, -80)
mobileButton.BackgroundColor3 = Color3.fromRGB(255, 70, 70)
mobileButton.Text = "ESP"
mobileButton.TextColor3 = Color3.fromRGB(255, 255, 255)
mobileButton.TextSize = 14
mobileButton.Font = Enum.Font.GothamBold
mobileButton.Parent = screenGui

local mobileCorner = Instance.new("UICorner")
mobileCorner.CornerRadius = UDim.new(1, 0)
mobileCorner.Parent = mobileButton

mobileButton.MouseButton1Click:Connect(function()
    mainFrame.Visible = not mainFrame.Visible
end)

-- Tab system
local tabs = {}

-- Helper function to create sidebar tab
function UI:CreateTab(name, icon)
    local tab = Instance.new("TextButton")
    tab.Size = UDim2.new(1, 0, 0, 35)
    tab.BackgroundColor3 = currentTab == name and Color3.fromRGB(255, 70, 70) or Color3.fromRGB(35, 35, 35)
    tab.BorderSizePixel = 0
    tab.AutoButtonColor = false
    tab.Text = ""
    tab.Parent = sidebar

    local tabCorner = Instance.new("UICorner")
    tabCorner.CornerRadius = UDim.new(0, 8)
    tabCorner.Parent = tab

    -- Icon
    local tabIcon = Instance.new("TextLabel")
    tabIcon.Size = UDim2.new(0, 18, 0, 18)
    tabIcon.Position = UDim2.new(0, 15, 0.5, -10)
    tabIcon.BackgroundTransparency = 1
    tabIcon.Text = icon or "🔧"
    tabIcon.TextColor3 = Color3.fromRGB(255, 255, 255)
    tabIcon.TextSize = 16
    tabIcon.Font = Enum.Font.GothamBold
    tabIcon.Parent = tab

    -- Label
    local tabLabel = Instance.new("TextLabel")
    tabLabel.Size = UDim2.new(1, -45, 1, 0)
    tabLabel.Position = UDim2.new(0, 45, 0, 0)
    tabLabel.BackgroundTransparency = 1
    tabLabel.Text = name
    tabLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    tabLabel.TextSize = 12
    tabLabel.Font = Enum.Font.Gotham
    tabLabel.TextXAlignment = Enum.TextXAlignment.Left
    tabLabel.Parent = tab

    -- Content container for this tab
    local tabContent = Instance.new("Frame")
    tabContent.Size = UDim2.new(1, 0, 1, 0)
    tabContent.BackgroundTransparency = 1
    tabContent.Visible = currentTab == name
    tabContent.Parent = contentBody

    local tabContentList = Instance.new("UIListLayout")
    tabContentList.FillDirection = Enum.FillDirection.Vertical
    tabContentList.SortOrder = Enum.SortOrder.LayoutOrder
    tabContentList.Padding = UDim.new(0, 10)
    tabContentList.Parent = tabContent

    -- Special layout for Pet tab - split into three panels
    if name == "Pet" then
        -- Left panel for ESP settings
        local leftPanel = Instance.new("ScrollingFrame")
        leftPanel.Size = UDim2.new(0.31, 0, 1, 0)
        leftPanel.Position = UDim2.new(0, 0, 0, 0)
        leftPanel.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
        leftPanel.BorderSizePixel = 0
        leftPanel.ScrollBarThickness = 6
        leftPanel.ScrollBarImageColor3 = Color3.fromRGB(255, 70, 70)
        leftPanel.Parent = tabContent
        
        local leftCorner = Instance.new("UICorner")
        leftCorner.CornerRadius = UDim.new(0, 8)
        leftCorner.Parent = leftPanel
        
        local leftList = Instance.new("UIListLayout")
        leftList.FillDirection = Enum.FillDirection.Vertical
        leftList.SortOrder = Enum.SortOrder.LayoutOrder
        leftList.Padding = UDim.new(0, 10)
        leftList.Parent = leftPanel
        
        local leftPadding = Instance.new("UIPadding")
        leftPadding.PaddingTop = UDim.new(0, 10)
        leftPadding.PaddingLeft = UDim.new(0, 10)
        leftPadding.PaddingRight = UDim.new(0, 10)
        leftPadding.PaddingBottom = UDim.new(0, 10)
        leftPadding.Parent = leftPanel
        
        -- Middle panel for pet controls
        local middlePanel = Instance.new("ScrollingFrame")
        middlePanel.Size = UDim2.new(0.31, 0, 1, 0)
        middlePanel.Position = UDim2.new(0.34, 0, 0, 0)
        middlePanel.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
        middlePanel.BorderSizePixel = 0
        middlePanel.ScrollBarThickness = 6
        middlePanel.ScrollBarImageColor3 = Color3.fromRGB(255, 70, 70)
        middlePanel.Parent = tabContent
        
        local middleCorner = Instance.new("UICorner")
        middleCorner.CornerRadius = UDim.new(0, 8)
        middleCorner.Parent = middlePanel
        
        local middleList = Instance.new("UIListLayout")
        middleList.FillDirection = Enum.FillDirection.Vertical
        middleList.SortOrder = Enum.SortOrder.LayoutOrder
        middleList.Padding = UDim.new(0, 10)
        middleList.Parent = middlePanel
        
        local middlePadding = Instance.new("UIPadding")
        middlePadding.PaddingTop = UDim.new(0, 10)
        middlePadding.PaddingLeft = UDim.new(0, 10)
        middlePadding.PaddingRight = UDim.new(0, 10)
        middlePadding.PaddingBottom = UDim.new(0, 10)
        middlePadding.Parent = middlePanel
        
        -- Right panel container (for pets list and refresh button)
        local rightContainer = Instance.new("Frame")
        rightContainer.Size = UDim2.new(0.38, 0, 1, 0)
        rightContainer.Position = UDim2.new(0.68, 0, 0, 0)
        rightContainer.BackgroundTransparency = 1
        rightContainer.Parent = tabContent
        
        -- Refresh button above right panel
        local refreshButton = Instance.new("TextButton")
        refreshButton.Size = UDim2.new(1, 0, 0, 32)
        refreshButton.Position = UDim2.new(0, 0, 0, 0)
        refreshButton.BackgroundColor3 = Color3.fromRGB(255, 70, 70)
        refreshButton.Text = "Refresh Active Pets"
        refreshButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        refreshButton.TextSize = 14
        refreshButton.Font = Enum.Font.Gotham
        refreshButton.BorderSizePixel = 0
        refreshButton.Parent = rightContainer
        
        local refreshCorner = Instance.new("UICorner")
        refreshCorner.CornerRadius = UDim.new(0, 8)
        refreshCorner.Parent = refreshButton
        
        -- Hover effect for refresh button
        refreshButton.MouseEnter:Connect(function()
            TweenService:Create(refreshButton, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(255, 90, 90)}):Play()
        end)
        
        refreshButton.MouseLeave:Connect(function()
            TweenService:Create(refreshButton, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(255, 70, 70)}):Play()
        end)
        
        -- Right panel for active pets
        local rightPanel = Instance.new("ScrollingFrame")
        rightPanel.Size = UDim2.new(1, 0, 1, -50)
        rightPanel.Position = UDim2.new(0, 0, 0, 50)
        rightPanel.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
        rightPanel.BorderSizePixel = 0
        rightPanel.ScrollBarThickness = 6
        rightPanel.ScrollBarImageColor3 = Color3.fromRGB(255, 70, 70)
        rightPanel.Parent = rightContainer
        
        local rightCorner = Instance.new("UICorner")
        rightCorner.CornerRadius = UDim.new(0, 8)
        rightCorner.Parent = rightPanel
        
        local rightList = Instance.new("UIListLayout")
        rightList.FillDirection = Enum.FillDirection.Vertical
        rightList.SortOrder = Enum.SortOrder.LayoutOrder
        rightList.Padding = UDim.new(0, 8)
        rightList.Parent = rightPanel
        
        local rightPadding = Instance.new("UIPadding")
        rightPadding.PaddingTop = UDim.new(0, 10)
        rightPadding.PaddingLeft = UDim.new(0, 10)
        rightPadding.PaddingRight = UDim.new(0, 10)
        rightPadding.PaddingBottom = UDim.new(0, 10)
        rightPadding.Parent = rightPanel
        
        -- Clear default list layout for Pet tab
        tabContentList:Destroy()
        
        tabs[name] = {
            button = tab,
            content = tabContent,
            leftPanel = leftPanel,
            middlePanel = middlePanel,
            rightPanel = rightPanel,
            leftList = leftList,
            middleList = middleList,
            rightList = rightList,
            refreshButton = refreshButton
        }
    else
        tabs[name] = {
            button = tab,
            content = tabContent,
            contentList = tabContentList
        }
    end

    tab.MouseButton1Click:Connect(function()
        -- Update current tab
        currentTab = name
        contentHeaderTitle.Text = name
        
        -- Update all tab appearances
        for tabName, tabData in pairs(tabs) do
            tabData.button.BackgroundColor3 = tabName == name and Color3.fromRGB(255, 70, 70) or Color3.fromRGB(35, 35, 35)
            tabData.content.Visible = tabName == name
        end
    end)

    return tabContent
end

-- Helper function to create toggle
function UI:CreateToggle(tabName, text, enabled, callback, panelType)
    local tabContent = tabs[tabName] and tabs[tabName].content or contentBody
    
    -- For Pet tab, choose panel based on panelType parameter
    local targetParent = tabContent
    if tabName == "Pet" and tabs["Pet"] then
        if panelType == "left" and tabs["Pet"].leftPanel then
            targetParent = tabs["Pet"].leftPanel
        elseif panelType == "middle" and tabs["Pet"].middlePanel then
            targetParent = tabs["Pet"].middlePanel
        elseif panelType == "right" and tabs["Pet"].rightPanel then
            targetParent = tabs["Pet"].rightPanel
        end
    end
    
    local toggle = Instance.new("Frame")
    toggle.Size = UDim2.new(1, 0, 0, 40)
    toggle.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    toggle.BorderSizePixel = 0
    toggle.Parent = targetParent
    
    local toggleCorner = Instance.new("UICorner")
    toggleCorner.CornerRadius = UDim.new(0, 8)
    toggleCorner.Parent = toggle
    
    local toggleLabel = Instance.new("TextLabel")
    toggleLabel.Size = UDim2.new(1, -60, 1, 0)
    toggleLabel.Position = UDim2.new(0, 15, 0, 0)
    toggleLabel.BackgroundTransparency = 1
    toggleLabel.Text = text
    toggleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    toggleLabel.TextSize = 13
    toggleLabel.Font = Enum.Font.Gotham
    toggleLabel.TextXAlignment = Enum.TextXAlignment.Left
    toggleLabel.Parent = toggle
    
    -- Toggle switch (smaller)
    local toggleSwitch = Instance.new("TextButton")
    toggleSwitch.Size = UDim2.new(0, 40, 0, 20)
    toggleSwitch.Position = UDim2.new(1, -50, 0.5, -10)
    toggleSwitch.BackgroundColor3 = enabled and Color3.fromRGB(255, 70, 70) or Color3.fromRGB(70, 70, 70)
    toggleSwitch.Text = ""
    toggleSwitch.Parent = toggle
    
    local switchCorner = Instance.new("UICorner")
    switchCorner.CornerRadius = UDim.new(1, 0)
    switchCorner.Parent = toggleSwitch
    
    local switchIndicator = Instance.new("Frame")
    switchIndicator.Size = UDim2.new(0, 16, 0, 16)
    switchIndicator.Position = enabled and UDim2.new(1, -18, 0.5, -8) or UDim2.new(0, 2, 0.5, -8)
    switchIndicator.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    switchIndicator.BorderSizePixel = 0
    switchIndicator.Parent = toggleSwitch
    
    local indicatorCorner = Instance.new("UICorner")
    indicatorCorner.CornerRadius = UDim.new(1, 0)
    indicatorCorner.Parent = switchIndicator
    
    local isEnabled = enabled
    
    toggleSwitch.MouseButton1Click:Connect(function()
        isEnabled = not isEnabled
        
        TweenService:Create(toggleSwitch, TweenInfo.new(0.2), {
            BackgroundColor3 = isEnabled and Color3.fromRGB(255, 70, 70) or Color3.fromRGB(70, 70, 70)
        }):Play()
        
        TweenService:Create(switchIndicator, TweenInfo.new(0.2), {
            Position = isEnabled and UDim2.new(1, -18, 0.5, -8) or UDim2.new(0, 2, 0.5, -8)
        }):Play()
        
        callback(isEnabled)
    end)
    
    return toggle
end

-- Helper function to create button
function UI:CreateButton(tabName, text, callback, panelType)
    local tabContent = tabs[tabName] and tabs[tabName].content or contentBody
    
    -- For Pet tab, choose panel based on panelType parameter
    local targetParent = tabContent
    if tabName == "Pet" and tabs["Pet"] then
        if panelType == "left" and tabs["Pet"].leftPanel then
            targetParent = tabs["Pet"].leftPanel
        elseif panelType == "middle" and tabs["Pet"].middlePanel then
            targetParent = tabs["Pet"].middlePanel
        elseif panelType == "right" and tabs["Pet"].rightPanel then
            targetParent = tabs["Pet"].rightPanel
        else
            -- Default to middle panel for Pet tab
            targetParent = tabs["Pet"].middlePanel or tabContent
        end
    end
    
    local button = Instance.new("TextButton")
    button.Size = UDim2.new(1, 0, 0, 32)
    button.BackgroundColor3 = Color3.fromRGB(255, 70, 70)
    button.Text = text
    button.TextColor3 = Color3.fromRGB(255, 255, 255)
    button.TextSize = 12
    button.Font = Enum.Font.Gotham
    button.BorderSizePixel = 0
    button.Parent = targetParent
    
    local buttonCorner = Instance.new("UICorner")
    buttonCorner.CornerRadius = UDim.new(0, 8)
    buttonCorner.Parent = button
    
    -- Hover effect
    button.MouseEnter:Connect(function()
        TweenService:Create(button, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(255, 90, 90)}):Play()
    end)
    
    button.MouseLeave:Connect(function()
        TweenService:Create(button, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(255, 70, 70)}):Play()
    end)
    
    button.MouseButton1Click:Connect(callback)
    
    -- Auto-update canvas size for Pet tab panels
    if tabName == "Pet" and tabs["Pet"] then
        if panelType == "left" and tabs["Pet"].leftList then
            tabs["Pet"].leftList:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
                tabs["Pet"].leftPanel.CanvasSize = UDim2.new(0, 0, 0, tabs["Pet"].leftList.AbsoluteContentSize.Y + 20)
            end)
        elseif panelType == "middle" and tabs["Pet"].middleList then
            tabs["Pet"].middleList:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
                tabs["Pet"].middlePanel.CanvasSize = UDim2.new(0, 0, 0, tabs["Pet"].middleList.AbsoluteContentSize.Y + 20)
            end)
        elseif panelType == "right" and tabs["Pet"].rightList then
            tabs["Pet"].rightList:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
                tabs["Pet"].rightPanel.CanvasSize = UDim2.new(0, 0, 0, tabs["Pet"].rightList.AbsoluteContentSize.Y + 20)
            end)
        end
    end
    
    return button
end

-- Helper function to create slider
function UI:CreateSlider(tabName, text, min, max, default, callback, panelType)
    local tabContent = tabs[tabName] and tabs[tabName].content or contentBody
    
    -- For Pet tab, choose panel based on panelType parameter
    local targetParent = tabContent
    if tabName == "Pet" and tabs["Pet"] then
        if panelType == "left" and tabs["Pet"].leftPanel then
            targetParent = tabs["Pet"].leftPanel
        elseif panelType == "middle" and tabs["Pet"].middlePanel then
            targetParent = tabs["Pet"].middlePanel
        elseif panelType == "right" and tabs["Pet"].rightPanel then
            targetParent = tabs["Pet"].rightPanel
        end
    end
    
    local slider = Instance.new("Frame")
    slider.Size = UDim2.new(1, 0, 0, 60)
    slider.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    slider.BorderSizePixel = 0
    slider.Parent = targetParent
    
    local sliderCorner = Instance.new("UICorner")
    sliderCorner.CornerRadius = UDim.new(0, 8)
    sliderCorner.Parent = slider
    
    local sliderLabel = Instance.new("TextLabel")
    sliderLabel.Size = UDim2.new(1, -60, 0, 20)
    sliderLabel.Position = UDim2.new(0, 20, 0, 10)
    sliderLabel.BackgroundTransparency = 1
    sliderLabel.Text = text
    sliderLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    sliderLabel.TextSize = 14
    sliderLabel.Font = Enum.Font.Gotham
    sliderLabel.TextXAlignment = Enum.TextXAlignment.Left
    sliderLabel.Parent = slider
    
    local sliderValue = Instance.new("TextLabel")
    sliderValue.Size = UDim2.new(0, 40, 0, 20)
    sliderValue.Position = UDim2.new(1, -50, 0, 8)
    sliderValue.BackgroundTransparency = 1
    sliderValue.Text = tostring(default)
    sliderValue.TextColor3 = Color3.fromRGB(255, 255, 255)
    sliderValue.TextSize = 12
    sliderValue.Font = Enum.Font.GothamBold
    sliderValue.TextXAlignment = Enum.TextXAlignment.Right
    sliderValue.Parent = slider
    
    local sliderTrack = Instance.new("Frame")
    sliderTrack.Size = UDim2.new(1, -35, 0, 3)
    sliderTrack.Position = UDim2.new(0, 15, 0, 32)
    sliderTrack.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
    sliderTrack.BorderSizePixel = 0
    sliderTrack.Parent = slider
    
    local trackCorner = Instance.new("UICorner")
    trackCorner.CornerRadius = UDim.new(1, 0)
    trackCorner.Parent = sliderTrack
    
    local sliderFill = Instance.new("Frame")
    sliderFill.Size = UDim2.new((default - min) / (max - min), 0, 1, 0)
    sliderFill.BackgroundColor3 = Color3.fromRGB(255, 70, 70)
    sliderFill.BorderSizePixel = 0
    sliderFill.Parent = sliderTrack
    
    local fillCorner = Instance.new("UICorner")
    fillCorner.CornerRadius = UDim.new(1, 0)
    fillCorner.Parent = sliderFill
    
    local sliderButton = Instance.new("TextButton")
    sliderButton.Size = UDim2.new(0, 14, 0, 14)
    sliderButton.Position = UDim2.new((default - min) / (max - min), -8, 0.5, -8)
    sliderButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    sliderButton.Text = ""
    sliderButton.Parent = sliderTrack
    
    local buttonCorner = Instance.new("UICorner")
    buttonCorner.CornerRadius = UDim.new(1, 0)
    buttonCorner.Parent = sliderButton
    
    local currentValue = default
    local dragging = false
    
    local function updateSlider(input)
        local relativeX = math.clamp((input.Position.X - sliderTrack.AbsolutePosition.X) / sliderTrack.AbsoluteSize.X, 0, 1)
        currentValue = math.floor(min + (max - min) * relativeX)
        
        sliderValue.Text = tostring(currentValue)
        sliderFill.Size = UDim2.new(relativeX, 0, 1, 0)
        sliderButton.Position = UDim2.new(relativeX, -8, 0.5, -8)
        
        callback(currentValue)
    end
    
    sliderButton.MouseButton1Down:Connect(function()
        dragging = true
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            updateSlider(input)
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
    
    sliderTrack.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            updateSlider(input)
        end
    end)
    
    return slider
end

-- Helper function to create textbox
function UI:CreateTextBox(tabName, text, placeholder, defaultValue, callback, panelType)
    local tabContent = tabs[tabName] and tabs[tabName].content or contentBody
    
    -- For Pet tab, choose panel based on panelType parameter
    local targetParent = tabContent
    if tabName == "Pet" and tabs["Pet"] then
        if panelType == "left" and tabs["Pet"].leftPanel then
            targetParent = tabs["Pet"].leftPanel
        elseif panelType == "middle" and tabs["Pet"].middlePanel then
            targetParent = tabs["Pet"].middlePanel
        elseif panelType == "right" and tabs["Pet"].rightPanel then
            targetParent = tabs["Pet"].rightPanel
        else
            -- Default to middle panel for Pet tab
            targetParent = tabs["Pet"].middlePanel or tabContent
        end
    end
    
    local textboxFrame = Instance.new("Frame")
    textboxFrame.Size = UDim2.new(1, 0, 0, 60)
    textboxFrame.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    textboxFrame.BorderSizePixel = 0
    textboxFrame.Parent = targetParent
    
    local textboxCorner = Instance.new("UICorner")
    textboxCorner.CornerRadius = UDim.new(0, 8)
    textboxCorner.Parent = textboxFrame
    
    local textboxLabel = Instance.new("TextLabel")
    textboxLabel.Size = UDim2.new(1, -20, 0, 20)
    textboxLabel.Position = UDim2.new(0, 20, 0, 10)
    textboxLabel.BackgroundTransparency = 1
    textboxLabel.Text = text
    textboxLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    textboxLabel.TextSize = 14
    textboxLabel.Font = Enum.Font.Gotham
    textboxLabel.TextXAlignment = Enum.TextXAlignment.Left
    textboxLabel.Parent = textboxFrame
    
    local textbox = Instance.new("TextBox")
    textbox.Size = UDim2.new(1, -40, 0, 25)
    textbox.Position = UDim2.new(0, 20, 0, 30)
    textbox.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    textbox.BorderSizePixel = 0
    textbox.Text = defaultValue or ""
    textbox.PlaceholderText = placeholder or ""
    textbox.TextColor3 = Color3.fromRGB(255, 255, 255)
    textbox.PlaceholderColor3 = Color3.fromRGB(150, 150, 150)
    textbox.TextSize = 12
    textbox.Font = Enum.Font.Gotham
    textbox.ClearTextOnFocus = false
    textbox.Parent = textboxFrame
    
    local textboxInputCorner = Instance.new("UICorner")
    textboxInputCorner.CornerRadius = UDim.new(0, 6)
    textboxInputCorner.Parent = textbox
    
    textbox.FocusLost:Connect(function(enterPressed)
        if callback then
            callback(textbox.Text)
        end
    end)
    
    -- Auto-update canvas size for Pet tab panels
    if tabName == "Pet" and tabs["Pet"] then
        if panelType == "left" and tabs["Pet"].leftList then
            tabs["Pet"].leftList:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
                tabs["Pet"].leftPanel.CanvasSize = UDim2.new(0, 0, 0, tabs["Pet"].leftList.AbsoluteContentSize.Y + 20)
            end)
        elseif panelType == "middle" and tabs["Pet"].middleList then
            tabs["Pet"].middleList:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
                tabs["Pet"].middlePanel.CanvasSize = UDim2.new(0, 0, 0, tabs["Pet"].middleList.AbsoluteContentSize.Y + 20)
            end)
        elseif panelType == "right" and tabs["Pet"].rightList then
            tabs["Pet"].rightList:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
                tabs["Pet"].rightPanel.CanvasSize = UDim2.new(0, 0, 0, tabs["Pet"].rightList.AbsoluteContentSize.Y + 20)
            end)
        end
    end
    
    return textboxFrame
end

-- Helper function to create dropdown
function UI:CreateDropdown(tabName, text, options, defaultIndex, callback, panelType)
    local tabContent = tabs[tabName] and tabs[tabName].content or contentBody
    
    -- For Pet tab, choose panel based on panelType parameter
    local targetParent = tabContent
    if tabName == "Pet" and tabs["Pet"] then
        if panelType == "left" and tabs["Pet"].leftPanel then
            targetParent = tabs["Pet"].leftPanel
        elseif panelType == "middle" and tabs["Pet"].middlePanel then
            targetParent = tabs["Pet"].middlePanel
        elseif panelType == "right" and tabs["Pet"].rightPanel then
            targetParent = tabs["Pet"].rightPanel
        else
            -- Default to middle panel for Pet tab
            targetParent = tabs["Pet"].middlePanel or tabContent
        end
    end
    
    local dropdown = Instance.new("Frame")
    dropdown.Size = UDim2.new(1, 0, 0, 50)
    dropdown.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    dropdown.BorderSizePixel = 0
    dropdown.Parent = targetParent
    
    local dropdownCorner = Instance.new("UICorner")
    dropdownCorner.CornerRadius = UDim.new(0, 8)
    dropdownCorner.Parent = dropdown
    
    local dropdownLabel = Instance.new("TextLabel")
    dropdownLabel.Size = UDim2.new(1, -15, 0, 18)
    dropdownLabel.Position = UDim2.new(0, 15, 0, 8)
    dropdownLabel.BackgroundTransparency = 1
    dropdownLabel.Text = text
    dropdownLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    dropdownLabel.TextSize = 12
    dropdownLabel.Font = Enum.Font.Gotham
    dropdownLabel.TextXAlignment = Enum.TextXAlignment.Left
    dropdownLabel.Parent = dropdown
    
    local dropdownButton = Instance.new("TextButton")
    dropdownButton.Size = UDim2.new(1, -40, 0, 25)
    dropdownButton.Position = UDim2.new(0, 20, 0, 30)
    dropdownButton.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    dropdownButton.BorderSizePixel = 0
    dropdownButton.Text = options[defaultIndex or 1] .. " ▼"
    dropdownButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    dropdownButton.TextSize = 12
    dropdownButton.Font = Enum.Font.Gotham
    dropdownButton.Parent = dropdown
    
    local dropdownButtonCorner = Instance.new("UICorner")
    dropdownButtonCorner.CornerRadius = UDim.new(0, 6)
    dropdownButtonCorner.Parent = dropdownButton
    
    local dropdownList = Instance.new("Frame")
    dropdownList.Size = UDim2.new(1, -40, 0, #options * 25)
    dropdownList.Position = UDim2.new(0, 20, 0, 55)
    dropdownList.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    dropdownList.BorderSizePixel = 0
    dropdownList.Visible = false
    dropdownList.Parent = dropdown
    dropdownList.ZIndex = 20
    dropdownList.BackgroundTransparency = 0
    
    local dropdownListCorner = Instance.new("UICorner")
    dropdownListCorner.CornerRadius = UDim.new(0, 6)
    dropdownListCorner.Parent = dropdownList
    
    local dropdownListLayout = Instance.new("UIListLayout")
    dropdownListLayout.FillDirection = Enum.FillDirection.Vertical
    dropdownListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    dropdownListLayout.Parent = dropdownList
    
    local selectedIndex = defaultIndex or 1
    local isOpen = false
    
    for i, option in ipairs(options) do
        local optionButton = Instance.new("TextButton")
        optionButton.Size = UDim2.new(1, 0, 0, 25)
        optionButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
        optionButton.BorderSizePixel = 0
        optionButton.Text = option
        optionButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        optionButton.TextSize = 12
        optionButton.Font = Enum.Font.Gotham
        optionButton.Parent = dropdownList
        optionButton.ZIndex = 21
        optionButton.BackgroundTransparency = 0
        optionButton.TextTransparency = 0
        
        optionButton.MouseEnter:Connect(function()
            TweenService:Create(optionButton, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(255, 70, 70)}):Play()
        end)
        
        optionButton.MouseLeave:Connect(function()
            TweenService:Create(optionButton, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(70, 70, 70)}):Play()
        end)
        
        optionButton.MouseButton1Click:Connect(function()
            selectedIndex = i
            dropdownButton.Text = option .. " ▼"
            isOpen = false
            
            -- Close dropdown
            dropdownList.Visible = false
            TweenService:Create(dropdown, TweenInfo.new(0.2), {Size = UDim2.new(1, 0, 0, 60)}):Play()
            dropdownButton.Text = string.gsub(dropdownButton.Text, " ▲", " ▼")
            
            if callback then
                callback(selectedIndex, option)
            end
        end)
    end
    
    dropdownButton.MouseButton1Click:Connect(function()
        isOpen = not isOpen
        
        if isOpen then
            -- Open dropdown
            dropdownList.Visible = true
            dropdownList.BackgroundTransparency = 0
            TweenService:Create(dropdown, TweenInfo.new(0.2), {Size = UDim2.new(1, 0, 0, 60 + #options * 25)}):Play()
            dropdownButton.Text = string.gsub(dropdownButton.Text, " ▼", " ▲")
            
            -- Make sure all option buttons are visible
            for _, child in pairs(dropdownList:GetChildren()) do
                if child:IsA("TextButton") then
                    child.BackgroundTransparency = 0
                    child.TextTransparency = 0
                end
            end
        else
            -- Close dropdown
            dropdownList.Visible = false
            TweenService:Create(dropdown, TweenInfo.new(0.2), {Size = UDim2.new(1, 0, 0, 60)}):Play()
            dropdownButton.Text = string.gsub(dropdownButton.Text, " ▲", " ▼")
        end
    end)
    
    -- Auto-update canvas size for Pet tab panels
    if tabName == "Pet" and tabs["Pet"] then
        if panelType == "left" and tabs["Pet"].leftList then
            tabs["Pet"].leftList:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
                tabs["Pet"].leftPanel.CanvasSize = UDim2.new(0, 0, 0, tabs["Pet"].leftList.AbsoluteContentSize.Y + 20)
            end)
        elseif panelType == "middle" and tabs["Pet"].middleList then
            tabs["Pet"].middleList:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
                tabs["Pet"].middlePanel.CanvasSize = UDim2.new(0, 0, 0, tabs["Pet"].middleList.AbsoluteContentSize.Y + 20)
            end)
        elseif panelType == "right" and tabs["Pet"].rightList then
            tabs["Pet"].rightList:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
                tabs["Pet"].rightPanel.CanvasSize = UDim2.new(0, 0, 0, tabs["Pet"].rightList.AbsoluteContentSize.Y + 20)
            end)
        end
    end
    
    return dropdown
end

--// --- Egg Possibilities Data (from JSON) ---
local egg_possibilities_data = {
    ["Common Egg"] = {"Dog", "Golden Lab", "Bunny"},
    ["Uncommon Egg"] = {"Black Bunny", "Chicken", "Cat", "Deer"},
    ["Rare Egg"] = {"Orange Tabby", "Spotted Deer", "Pig", "Rooster", "Monkey"},
    ["Legendary Egg"] = {"Cow", "Silver Monkey", "Sea Otter", "Turtle", "Polar Bear"},
    ["Mythical Egg"] = {"Grey Mouse", "Brown Mouse", "Squirrel", "Red Giant Ant", "Red Fox"},
    ["Bug Egg"] = {"Caterpillar", "Snail", "Giant Ant", "Praying Mantis", "Dragonfly"},
    ["Bee Egg"] = {"Bee", "Honey Bee", "Bear Bee", "Petal Bee", "Queen Bee"},
    ["Paradise Egg"] = {"Ostrich", "Peacock", "Capybara", "Scarlet Macaw", "Mimic Octopus"},
    ["Oasis Egg"] = {"Meerkat", "Sand Snake", "Axolotl", "Hyacinth Macaw", "Fennec Fox"},
    ["Night Egg"] = {"Hedgehog", "Mole", "Frog", "Echo Frog", "Night Owl", "Raccoon"},
    ["Dinosaur Egg"] = {"Raptor", "Triceratops", "Stegosaurus", "Pterodactyl", "Brontosaurus", "T-Rex"},
    ["Primal Egg"] = {"Parasaurolophus", "Iguanodon", "Pachycephalosaurus", "Dilophosaurus", "Ankylosaurus", "Spinosaurus"},
    ["Premium Primal Egg"] = {"Parasaurolophus", "Iguanodon", "Pachycephalosaurus", "Dilophosaurus", "Ankylosaurus", "Spinosaurus", "Rainbow Primal Egg"}
}

--// --- ESP VARIABLES ---
local lastRerollTime = 0
local REROLL_COOLDOWN = 3 -- seconds

--// Modules for Predictor
local calculate_pet_value

pcall(function()
    local Modules = ReplicatedStorage:WaitForChild("Modules")
    calculate_pet_value = require(Modules:FindFirstChild("CalculatePetValue"))
end)

--// Pet Predictor Logic
local pet_list = {}
pcall(function()
    local hatch_event = ReplicatedStorage.GameEvents.PetEggService
    local hatch_func = getupvalue(getupvalue(getconnections(hatch_event.OnClientEvent)[1].Function, 1), 2)
    pet_list = getupvalue(hatch_func, 2)
end)

--// Track attached ESPs to prevent duplicates
local AttachedESP = {}

--// Function to create a Billboard GUI on the egg
local function CreateESP(model)
    if not model or not model.PrimaryPart then return end
    if model:FindFirstChild("EggESP") then return end

    local billboard = Instance.new("BillboardGui")
    billboard.Name = "EggESP"
    billboard.Adornee = model.PrimaryPart
    billboard.Size = UDim2.new(0, 180, 0, 80) -- Made smaller
    billboard.StudsOffset = Vector3.new(0, 4, 0)
    billboard.AlwaysOnTop = true
    billboard.Parent = model.PrimaryPart

    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1, 0, 1, 0)
    label.BackgroundTransparency = 1
    label.TextColor3 = Color3.fromRGB(255, 255, 255) -- White text
    label.TextStrokeTransparency = 0 -- Black outline
    label.TextStrokeColor3 = Color3.new(0, 0, 0)
    label.Font = Enum.Font.GothamBold
    label.TextScaled = true
    label.RichText = true
    label.Text = "Loading..."
    label.Parent = billboard

    return label
end

--// Helper to get all possible pets for an egg type
local function getPossiblePetsForEgg(eggName)
    return egg_possibilities_data[eggName] or {}
end

--// Helper to calculate pet value
local function getPetValue(petName)
    if not calculate_pet_value or not petName then return 0 end
    
    local fakeTool = { Name = petName, GetAttribute = function(_, attr) if attr == "ItemName" then return petName end end }
    local ok, value = pcall(calculate_pet_value, fakeTool)
    if ok and type(value) == "number" then
        return value
    end
    return 0
end

--// Function to update the text on an ESP label
local function updateEggLabel(eggInstance)
    local data = AttachedESP[eggInstance]
    if not data or not data.Label or not data.Label.Parent then return end

    local petToShow
    local valueToShow

    if data.DisplayIndex == -1 then -- Show the actual predicted pet
        petToShow = data.ActualPredictedPet
        valueToShow = data.ActualPredictedValue
    else -- Show a possible pet
        petToShow = data.PossiblePets[data.DisplayIndex]
        if petToShow then
            valueToShow = getPetValue(petToShow)
        else -- Fallback if index is somehow invalid
            petToShow = data.ActualPredictedPet
            valueToShow = data.ActualPredictedValue
            data.DisplayIndex = -1 -- Correct the index
        end
    end

    local petName = tostring(petToShow) -- Both actual and possible pets are strings
    local timeLeft = eggInstance:GetAttribute("TimeToHatch") or 0
    local timeString = (timeLeft <= 0) and "Ready" or math.floor(timeLeft) .. "s"

    data.Label.Text = data.EggName .. "\n" .. "<font color='rgb(255,255,0)'>" .. petName .. "</font>" .. "\n" .. timeString
end

--// Function to attach ESP to a given pet egg instance
local function AttachESPToEgg(eggInstance)
    if not espEnabled or AttachedESP[eggInstance] then return end
    if not eggInstance:IsA("Model") then return end

    local owner = eggInstance:GetAttribute("OWNER")
    local eggName = eggInstance:GetAttribute("EggName")

    if not eggName or not owner or owner ~= LocalPlayer.Name then return end

    --// --- Pet Prediction ---
    local uuid = eggInstance:GetAttribute("OBJECT_UUID")
    local actualPredictedPet = (uuid and pet_list and pet_list[uuid]) and pet_list[uuid] or "Unknown Pet"
    
    local renderModel = eggInstance:FindFirstChildWhichIsA("Model") or eggInstance
    local label = CreateESP(renderModel)
    if not label then return end

    --// Store data for the central update loop
    AttachedESP[eggInstance] = {
        Label = label,
        EggName = eggName,
        ActualPredictedPet = actualPredictedPet,
        ActualPredictedValue = getPetValue(actualPredictedPet), -- Calculate initial value
        PossiblePets = getPossiblePetsForEgg(eggName),
        DisplayIndex = -1, -- -1 means show actual prediction
        LastUpdated = 0,
        Hatched = false
    }
    updateEggLabel(eggInstance) -- Initial text update
end

--// Function to refresh all predictions
local function refreshAllESPs()
    for _, data in pairs(AttachedESP) do
        if data.Label and data.Label.Parent then data.Label.Parent:Destroy() end
    end
    AttachedESP = {}
    for _, eggInstance in ipairs(CollectionService:GetTagged("PetEggServer")) do
        AttachESPToEgg(eggInstance)
    end
end

--// Reroll function
local function performReroll()
    if not espEnabled or tick() - lastRerollTime < REROLL_COOLDOWN then return end
    lastRerollTime = tick()
    
    for eggInstance, data in pairs(AttachedESP) do
        if #data.PossiblePets > 0 then
            -- If we are showing the actual pet, switch to the first possible pet
            if data.DisplayIndex == -1 then
                data.DisplayIndex = 1
            else
            -- Otherwise, go to the next possible pet
                data.DisplayIndex = data.DisplayIndex + 1
            end

            -- If we've cycled past the last possible pet, go back to the actual one
            if data.DisplayIndex > #data.PossiblePets then
                data.DisplayIndex = -1
            end
            updateEggLabel(eggInstance)
        end
    end
end

--// --- ACTIVE PETS DATA ---
local selectedPets = {}
local activePetsList = {}
local petCheckboxes = {}

-- Function to get currently selected pets
local function getSelectedPets()
    local selected = {}
    for uuid, isSelected in pairs(selectedPets) do
        if isSelected then
            for _, pet in ipairs(activePetsList) do
                if pet.UUID == uuid then
                    table.insert(selected, pet)
                    break
                end
            end
        end
    end
    return selected
end

-- Function to get active pets from the game
local function getActivePets()
    local activePets = {}
    
    local success, error = pcall(function()
        local Modules = ReplicatedStorage:WaitForChild("Modules")
        if not Modules then 
            warn("Modules not found")
            return
        end
        
        local ActivePetsService = require(Modules.PetServices.ActivePetsService)
        local ReplicationClass = require(Modules.ReplicationClass)
        
        if not ActivePetsService or not ReplicationClass then
            warn("Required modules not found")
            return
        end
        
        local replicator = ReplicationClass.new("ActivePetsService_Replicator")
        local data = replicator:YieldUntilData()
        
        if not data or not data.Table then
            warn("No data available")
            return
        end
        
        local playerActivePets = data.Table.ActivePetStates[LocalPlayer.Name] or data.Table.ActivePetStates[tostring(LocalPlayer.UserId)]
        
        if playerActivePets then
            for petUUID, petData in pairs(playerActivePets) do
                local petInfo = ActivePetsService:GetPetData(LocalPlayer.Name, petUUID)
                if petInfo and petInfo.PetType then
                    table.insert(activePets, {
                        UUID = petUUID,
                        Name = petInfo.PetType,
                        Data = petInfo
                    })
                end
        end
    end
end)

    if not success then
        warn("Error getting active pets: " .. tostring(error))
    end
    
    return activePets
end

-- Function to get selected pets count
local function getSelectedPetsCount()
    local selectedCount = 0
    for uuid, isSelected in pairs(selectedPets) do
        if isSelected then
            selectedCount = selectedCount + 1
        end
    end
    return selectedCount
end

-- Function to create pet multi-select checkbox
local function createPetCheckbox(pet, index)
    local rightPanel = tabs["Pet"] and tabs["Pet"].rightPanel or contentBody
    
    local checkbox = Instance.new("Frame")
    checkbox.Size = UDim2.new(1, 0, 0, 35) -- Smaller height
    checkbox.BackgroundColor3 = Color3.fromRGB(55, 55, 55)
    checkbox.BorderSizePixel = 0
    checkbox.Parent = rightPanel
    
    local checkboxCorner = Instance.new("UICorner")
    checkboxCorner.CornerRadius = UDim.new(0, 6)
    checkboxCorner.Parent = checkbox
    
    -- Checkbox indicator
    local checkIndicator = Instance.new("Frame")
    checkIndicator.Size = UDim2.new(0, 18, 0, 18) -- Smaller checkbox
    checkIndicator.Position = UDim2.new(0, 12, 0.5, -9)
    checkIndicator.BackgroundColor3 = selectedPets[pet.UUID] and Color3.fromRGB(255, 70, 70) or Color3.fromRGB(70, 70, 70)
    checkIndicator.BorderSizePixel = 0
    checkIndicator.Parent = checkbox
    
    local checkCorner = Instance.new("UICorner")
    checkCorner.CornerRadius = UDim.new(0, 3)
    checkCorner.Parent = checkIndicator
    
    -- Checkmark
    local checkmark = Instance.new("TextLabel")
    checkmark.Size = UDim2.new(1, 0, 1, 0)
    checkmark.BackgroundTransparency = 1
    checkmark.Text = selectedPets[pet.UUID] and "✓" or ""
    checkmark.TextColor3 = Color3.fromRGB(255, 255, 255)
    checkmark.TextSize = 12
    checkmark.Font = Enum.Font.GothamBold
    checkmark.Parent = checkIndicator
    
    -- Pet name label
    local petLabel = Instance.new("TextLabel")
    petLabel.Size = UDim2.new(1, -40, 1, 0)
    petLabel.Position = UDim2.new(0, 38, 0, 0)
    petLabel.BackgroundTransparency = 1
    petLabel.Text = pet.Name .. " (" .. string.sub(pet.UUID, 1, 6) .. ")"
    petLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    petLabel.TextSize = 12 -- Smaller text
    petLabel.Font = Enum.Font.Gotham
    petLabel.TextXAlignment = Enum.TextXAlignment.Left
    petLabel.TextTruncate = Enum.TextTruncate.AtEnd -- Truncate long names
    petLabel.Parent = checkbox
    
    -- Make it clickable
    local clickButton = Instance.new("TextButton")
    clickButton.Size = UDim2.new(1, 0, 1, 0)
    clickButton.BackgroundTransparency = 1
    clickButton.Text = ""
    clickButton.Parent = checkbox
    
    clickButton.MouseButton1Click:Connect(function()
        selectedPets[pet.UUID] = not selectedPets[pet.UUID]
        
        -- Update visual state with smooth animation
        TweenService:Create(checkIndicator, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {
            BackgroundColor3 = selectedPets[pet.UUID] and Color3.fromRGB(255, 70, 70) or Color3.fromRGB(70, 70, 70)
        }):Play()
        
        checkmark.Text = selectedPets[pet.UUID] and "✓" or ""
        
        print((selectedPets[pet.UUID] and "✓ Selected: " or "✗ Deselected: ") .. pet.Name)
    end)
    
    -- Auto-update canvas size for right panel
    local rightList = tabs["Pet"] and tabs["Pet"].rightList
    if rightList then
        rightList:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            rightPanel.CanvasSize = UDim2.new(0, 0, 0, rightList.AbsoluteContentSize.Y + 20)
        end)
    end
    
    return checkbox
end

-- Function to refresh and display pets
local function refreshActivePets()
    -- Clear existing checkboxes
    for _, checkbox in ipairs(petCheckboxes) do
        checkbox:Destroy()
    end
    petCheckboxes = {}
    
    -- Get new pets
    activePetsList = getActivePets()
    
    if #activePetsList > 0 then
       -- print("━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━")
       -- print("🎮 ACTIVE PETS LOADED (" .. #activePetsList .. ")")
       -- print("━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━")
        
        -- Create checkboxes for each pet
        for i, pet in ipairs(activePetsList) do
            local checkbox = createPetCheckbox(pet, i)
            table.insert(petCheckboxes, checkbox)
        end
        
        -- Update right panel scroll size for proper scrolling
        local rightPanel = tabs["Pets"] and tabs["Pets"].rightPanel
        if rightPanel then
            local rightList = tabs["Pets"].rightList
            if rightList then
                -- Wait for layout to update then set canvas size
                task.wait(0.1)
                rightPanel.CanvasSize = UDim2.new(0, 0, 0, rightList.AbsoluteContentSize.Y + 20)
            end
        end
        
      --  print("✅ Multi-select checkboxes created!")
        --print("Click on any pet to select/deselect it")
        --print("Switch to the Pets tab to see them!")
        
    else
        --print("❌ No active pets found!")
        --print("Make sure you have pets active in the game.")
        end
    end

--// --- PET STATE MANAGEMENT ---
local petStates = {"Idle", "FollowPlayer", "TargetPlant", "Inspection"}
local selectedPetState = 1
local stateSetInterval = 2
local isStateLoopRunning = false
local stateLoopThread = nil

-- Function to get ActivePetsService
local function getActivePetsService()
    local success, ActivePetsService = pcall(function()
        local Modules = ReplicatedStorage:WaitForChild("Modules")
        return require(Modules.PetServices.ActivePetsService)
    end)
    
    if success then
        return ActivePetsService
    else
        warn("Failed to get ActivePetsService: " .. tostring(ActivePetsService))
        return nil
    end
end

-- Function to set pet state
local function setPetState(petUUID, stateName)
    local ActivePetsService = getActivePetsService()
    if not ActivePetsService then return false end
    
    local success, error = pcall(function()
        if stateName == "TargetPlant" then
            -- For TargetPlant, we need to provide target data
            local targetData = {TargetedPlant = nil} -- You can modify this if needed
            ActivePetsService:SetPetState(petUUID, stateName, targetData)
        else
            ActivePetsService:SetPetState(petUUID, stateName)
        end
    end)
    
    if not success then
        warn("Failed to set pet state: " .. tostring(error))
        return false
    end
    
    return true
end

-- Function to start/stop state loop
local function toggleStateLoop()
    if isStateLoopRunning then
        -- Stop the loop
        isStateLoopRunning = false
        if stateLoopThread then
            task.cancel(stateLoopThread)
            stateLoopThread = nil
        end
        --print("🛑 Pet state loop stopped")
        return false
    else
        -- Start the loop
        isStateLoopRunning = true
        
        stateLoopThread = task.spawn(function()
            local lastStateName = ""
            --print("🔄 Pet state loop started - Initial state: " .. petStates[selectedPetState] .. " (Interval: " .. stateSetInterval .. "s)")
            
            while isStateLoopRunning do
                -- Get current state dynamically
                local currentStateName = petStates[selectedPetState]
                
                -- Check if state changed mid-loop
                if currentStateName ~= lastStateName then
                    if lastStateName ~= "" then
                       -- print("🔄 State changed during loop: " .. lastStateName .. " → " .. currentStateName)
                    end
                    lastStateName = currentStateName
                end
                
                local selectedCount = 0
                
                for uuid, isSelected in pairs(selectedPets) do
                    if isSelected then
                        selectedCount = selectedCount + 1
                        local success = setPetState(uuid, currentStateName)
                        if success then
                            --print("✅ Set " .. uuid .. " to " .. currentStateName)
                        else
                            --print("❌ Failed to set " .. uuid .. " to " .. currentStateName)
                        end
                    end
                end
                
                if selectedCount == 0 then
                    --print("⚠️ No pets selected! Select some pets first.")
                end
                
                task.wait(stateSetInterval)
            end
        end)
        
        return true
    end
end

--// --- STELLAR UI INITIALIZATION ---

-- Create tabs
UI:CreateTab("Shop", "🛒")
UI:CreateTab("Pet", "🐾")
UI:CreateTab("Misc", "🔧")
UI:CreateTab("Player", "👤")


-- Shop tab content
--[[UI:CreateButton("Shop", "Coming Soon...", function()
   -- print("🛒 Shop features coming soon!")
end)]]

-- Pet tab content - Left panel (ESP settings)
UI:CreateToggle("Pet", "Enable ESP", true, function(state)
    espEnabled = state
    if espEnabled then 
        refreshAllESPs() 
       -- print("✅ ESP Enabled")
    else 
        for _, data in pairs(AttachedESP) do 
            if data.Label and data.Label.Parent then 
                data.Label.Parent.Enabled = false 
            end 
        end 
       -- print("❌ ESP Disabled")
    end
end, "left")

UI:CreateButton("Pet", "Reroll Predictions", function()
    performReroll()
    --print("🎲 Predictions rerolled!")
end, "left")

UI:CreateSlider("Pet", "Update Interval", 1, 10, UPDATE_INTERVAL, function(value)
    UPDATE_INTERVAL = value
   -- print("📊 Update interval set to: " .. value .. "s")
end, "left")

UI:CreateToggle("Pet", "Show Egg Names", true, function(state)
    --print("🥚 Egg names " .. (state and "enabled" or "disabled"))
end, "left")

UI:CreateToggle("Pet", "Show Timer", true, function(state)
   -- print("⏰ Timer " .. (state and "enabled" or "disabled"))
end, "left")

--// --- PET MUTATION MACHINE ESP VARIABLES ---
local mutationESPEnabled = false
local AttachedMutationESP = {}

--// Function to get mutation machine data
local function GetMutationMachineData()
    local success, result = pcall(function()
        local data = DataService:GetData()
        return data and data.PetMutationMachine
    end)
    return success and result or nil
end

--// Function to get mutation registry data
local function GetMutationRegistry()
    local success, registry = pcall(function()
        return require(ReplicatedStorage.Data.PetRegistry.PetMutationRegistry)
    end)
    return success and registry or nil
end

--// Function to create ESP for mutation machine (Billboard above machine)
local function CreateMutationESP(machineModel)
   -- print("🔧 Attempting to create ESP for: " .. tostring(machineModel.Name))
    
    if not machineModel then 
       -- print("❌ No machineModel provided")
        return 
    end
    
    if machineModel:FindFirstChild("MutationESP") then 
       -- print("⚠️ ESP already exists for: " .. machineModel.Name)
        return 
    end

    -- Try to find a suitable part to attach to
    local attachPart = machineModel.PrimaryPart
    if not attachPart then
        -- Try to find any part in the model
        for _, child in pairs(machineModel:GetChildren()) do
            if child:IsA("BasePart") then
                attachPart = child
                --print("🔧 Using part: " .. child.Name .. " as attach point")
                break
            end
        end
    else
       -- print("🔧 Using PrimaryPart: " .. attachPart.Name)
    end
    
    if not attachPart then
       -- print("❌ No suitable part found to attach ESP to")
        return
    end

    local billboard = Instance.new("BillboardGui")
    billboard.Name = "MutationESP"
    billboard.Adornee = attachPart
    billboard.Size = UDim2.new(0, 300, 0, 150)
    billboard.StudsOffset = Vector3.new(0, 8, 0)
    billboard.AlwaysOnTop = true
    billboard.LightInfluence = 0
    billboard.Parent = attachPart

    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1, 0, 1, 0)
    label.BackgroundTransparency = 0.2
    label.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    label.TextColor3 = Color3.fromRGB(255, 255, 255)
    label.TextStrokeTransparency = 0
    label.TextStrokeColor3 = Color3.new(0, 0, 0)
    label.Font = Enum.Font.GothamBold
    label.TextScaled = true
    label.RichText = true
    label.Text = "<font color='rgb(100,255,255)'>MUTATION MACHINE</font>\n<font color='rgb(255,255,100)'>ESP Active!</font>"
    label.Parent = billboard
    
    -- Add corner radius
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 8)
    corner.Parent = label

   -- print("✅ ESP created successfully for: " .. machineModel.Name)
    return label
end

-- Mutation ESP removed per user request

-- All Mutation ESP code removed per user request
-- Experimental: Start Mutation Without Pet
UI:CreateButton("Pet", "Start Mutation (No Pet)", function()
    local success, error = pcall(function()
        -- Check if ReplicatedStorage and GameEvents exist
        if not ReplicatedStorage then
           -- print("❌ ReplicatedStorage not found!")
            return
        end
        
        local gameEvents = ReplicatedStorage:FindFirstChild("GameEvents")
        if not gameEvents then
           -- print("❌ GameEvents not found in ReplicatedStorage!")
            return
        end
        
        local mutationService = gameEvents:FindFirstChild("PetMutationMachineService_RE")
        if not mutationService then
           -- print("❌ PetMutationMachineService_RE not found!")
            return
        end
        
        -- Get machine data to check current state
        local machineData = GetMutationMachineData()
        if not machineData then
            --print("❌ No mutation machine data found!")
            return
        end
        
        if machineData.IsRunning then
            --print("❌ Machine is already running!")
            return
        end
        
        if machineData.TimeLeft and machineData.TimeLeft > 0 then
           -- print("❌ Machine is already processing!")
            return
        end
        
        -- Try different server commands to start without pet
       -- print("🧪 Attempting to start mutation machine without pet...")
        
        -- Try various possible server commands
        local commands = {
            "StartMachine",
            "StartMachineEmpty", 
            "StartWithoutPet",
            "ForceStart",
            "EmptyStart",
            "TestStart"
        }
        
        for _, command in ipairs(commands) do
            local cmdSuccess, cmdError = pcall(function()
                mutationService:FireServer(command)
               -- print("📡 Tried command: " .. command)
            end)
            
            if not cmdSuccess then
               -- print("⚠️ Command " .. command .. " failed: " .. tostring(cmdError))
            end
            
            task.wait(0.1) -- Small delay between commands
        end
        
       -- print("🔬 Experimental start commands sent! Check machine status.")
        
    end)
    
    if not success then
       -- print("❌ Error in experimental start: " .. tostring(error))
    end
end, "left")

-- Pet Mutation Machine Control Buttons
UI:CreateButton("Pet", "Submit Held Pet", function()
    local success, error = pcall(function()
        -- Check if ReplicatedStorage and GameEvents exist
        if not ReplicatedStorage then
           -- print("❌ ReplicatedStorage not found!")
            return
        end
        
        local gameEvents = ReplicatedStorage:FindFirstChild("GameEvents")
        if not gameEvents then
           -- print("❌ GameEvents not found in ReplicatedStorage!")
            return
        end
        
        local mutationService = gameEvents:FindFirstChild("PetMutationMachineService_RE")
        if not mutationService then
           -- print("❌ PetMutationMachineService_RE not found!")
            return
        end
        
        -- Check if player has a pet tool equipped
        local character = LocalPlayer.Character
        if not character then
           -- print("❌ No character found!")
            return
        end
        
        local heldTool = character:FindFirstChildWhichIsA("Tool")
        if not heldTool then
           -- print("❌ No tool equipped! Hold a pet first.")
            return
        end
        
        -- Check if it's a pet
      --  local itemType = heldTool:GetAttribute("ITEM_TYPE")
       -- if itemType ~= "Pet" then
       --     print("❌ Held item is not a pet! Current item: " .. tostring(heldTool.Name))
       --     return
       -- end
        
        -- Fire the server event to submit the pet
        mutationService:FireServer("SubmitHeldPet")
        
        local petName = heldTool:GetAttribute("ItemName") or heldTool.Name
        --print("🐶 Submitted pet: " .. tostring(petName))
        
    end)
    
    if not success then
       -- print("❌ Error submitting pet: " .. tostring(error))
    end
end, "left")

--[[UI:CreateButton("Pet", "Start Mutation", function()
    local success, error = pcall(function()
        -- Check if ReplicatedStorage and GameEvents exist
        if not ReplicatedStorage then
            print("❌ ReplicatedStorage not found!")
            return
        end
        
        local gameEvents = ReplicatedStorage:FindFirstChild("GameEvents")
        if not gameEvents then
            print("❌ GameEvents not found in ReplicatedStorage!")
            return
        end
        
        local mutationService = gameEvents:FindFirstChild("PetMutationMachineService_RE")
        if not mutationService then
            print("❌ PetMutationMachineService_RE not found!")
            return
        end
        
        -- Get machine data to check if pet is submitted
        local machineData = GetMutationMachineData()
        if not machineData then
            print("❌ No mutation machine data found!")
            return
        end
        
        if not machineData.SubmittedPet then
            print("❌ No pet submitted! Submit a pet first.")
            return
        end
        
        if machineData.IsRunning then
            print("❌ Machine is already running!")
            return
        end
        
        if machineData.TimeLeft and machineData.TimeLeft > 0 then
            print("❌ Machine is already processing!")
            return
        end
        
        -- Fire the server event to start the machine
        mutationService:FireServer("StartMachine")
        
        print("🔬 Started mutation for: " .. tostring(machineData.SubmittedPet.PetType or "Unknown Pet"))
        
    end)
    
    if not success then
        print("❌ Error starting mutation: " .. tostring(error))
    end
end, "left")
]]
UI:CreateButton("Pet", "Claim Mutated Pet", function()
    local success, error = pcall(function()
        -- Check if ReplicatedStorage and GameEvents exist
        if not ReplicatedStorage then
           -- print("❌ ReplicatedStorage not found!")
            return
        end
        
        local gameEvents = ReplicatedStorage:FindFirstChild("GameEvents")
        if not gameEvents then
           -- print("❌ GameEvents not found in ReplicatedStorage!")
            return
        end
        
        local mutationService = gameEvents:FindFirstChild("PetMutationMachineService_RE")
        if not mutationService then
         --   print("❌ PetMutationMachineService_RE not found!")
            return
        end
        
        -- Get machine data to check if pet is ready
        local machineData = GetMutationMachineData()
        if not machineData then
          --  print("❌ No mutation machine data found!")
            return
        end
        
        if not machineData.PetReady then
          --  print("❌ Pet is not ready to claim yet!")
            return
        end
        
        -- Fire the server event to claim the pet
        mutationService:FireServer("ClaimMutatedPet")
        
      --  print("🎉 Claimed mutated pet!")
        
    end)
    
    if not success then
       -- print("❌ Error claiming pet: " .. tostring(error))
    end
end, "left")


-- Function to get the model under cursor (similar to shovel highlighting)
local function getRaycastedModel()
    local character = LocalPlayer.Character
    if not character then return nil end
    
    local mouse = LocalPlayer:GetMouse()
    local camera = workspace.CurrentCamera
    local ray = camera:ViewportPointToRay(mouse.X, mouse.Y)
    
    local raycastParams = RaycastParams.new()
    raycastParams.FilterType = Enum.RaycastFilterType.Exclude
    raycastParams.FilterDescendantsInstances = {CollectionService:GetTagged("ShovelIgnore")}
    
    local raycastResult = workspace:Raycast(ray.Origin, ray.Direction * 500, raycastParams)
    
    if raycastResult and raycastResult.Instance then
        local model = raycastResult.Instance:FindFirstAncestorWhichIsA("Model")
        if model then
            -- Check if it's in the player's farm
            local GetFarm_upvr = require(ReplicatedStorage.Modules.GetFarm)
            local playerFarm = GetFarm_upvr(LocalPlayer)
            if playerFarm and raycastResult.Instance:IsDescendantOf(playerFarm) then
                -- Check if it's a growable or placeable object
                if CollectionService:HasTag(model, "Growable") or CollectionService:HasTag(model, "PlaceableObject") then
                    return model
                end
            end
        end
    end
    
    return nil
end

-- Function to clone the highlighted model
local function cloneHighlightedModel()
    local success, error = pcall(function()
        local character = LocalPlayer.Character
        if not character or not character:FindFirstChild("HumanoidRootPart") then
            --print("❌ Character not found!")
            return
        end
        
        local modelToClone = getRaycastedModel()
        if not modelToClone then
           -- print("❌ No valid model found under cursor! Point at a plant/object to clone.")
            return
        end
        
        local playerPos = character.HumanoidRootPart.CFrame
        
        -- Clone the model
        local clone = modelToClone:Clone()
        clone:SetPrimaryPartCFrame(playerPos * CFrame.new(0, -4, -5))
        clone.Parent = workspace
        
        -- Re-enable collision for the clone if it was disabled
        for _, part in pairs(clone:GetDescendants()) do
            if part:IsA("BasePart") then
                part.CanCollide = true
                part.CanQuery = true
            end
        end
        
        --print("✅ Successfully cloned: " .. modelToClone.Name)
    end)
    
    if not success then
        --print("❌ Error cloning model: " .. tostring(error))
    end
end



-- Pet tab content - Middle panel (Pet state management)
UI:CreateDropdown("Pet", "Pet State", petStates, 1, function(index, stateName)
    selectedPetState = index
   -- print("🎯 Selected pet state: " .. stateName)
end, "middle")

UI:CreateTextBox("Pet", "State Interval (seconds)", "2", "2", function(value)
    local numValue = tonumber(value)
    if numValue and numValue > 0 then
        stateSetInterval = numValue
       -- print("⏱️ State interval set to: " .. numValue .. "s")
    else
      --  print("❌ Invalid interval! Please enter a positive number.")
    end
end, "middle")

UI:CreateButton("Pet", "Start/Stop State Loop", function()
    local isRunning = toggleStateLoop()
    local buttonText = isRunning and "🟢 Set State" or "🔴 Exit State"
    --print(buttonText)
end, "middle")

-- Misc tab content
-- Helper function to create info text
local function createInfoText(tabName, text)
    local info = Instance.new("Frame")
    info.Size = UDim2.new(1, 0, 0, 70)
    info.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    info.BorderSizePixel = 0
    info.Parent = tabs[tabName] and tabs[tabName].content or contentBody
    
    local infoCorner = Instance.new("UICorner")
    infoCorner.CornerRadius = UDim.new(0, 8)
    infoCorner.Parent = info
    
    local infoLabel = Instance.new("TextLabel")
    infoLabel.Size = UDim2.new(1, -20, 1, -20)
    infoLabel.Position = UDim2.new(0, 10, 0, 10)
    infoLabel.BackgroundTransparency = 1
    infoLabel.Text = text
    infoLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    infoLabel.TextSize = 10
    infoLabel.Font = Enum.Font.Gotham
    infoLabel.TextXAlignment = Enum.TextXAlignment.Left
    infoLabel.TextYAlignment = Enum.TextYAlignment.Top
    infoLabel.TextWrapped = true
    infoLabel.Parent = info
    
    return info
end

createInfoText("Misc", "🔧 Model Cloner Instructions:\n\n1. Point your cursor at any plant/object in your farm\n2. Press K key OR click the Clone button below\n3. The model will be cloned in front of you\n\nWorks with all plants, decorations, and placeable objects!")

UI:CreateButton("Misc", "Clone Highlighted Model", cloneHighlightedModel)

-- Player tab content
-- Add inventory buttons
UI:CreateButton("Player", "Print Inventory", function()
    PrintAllInventoryItems()
end)

UI:CreateButton("Player", "Clone Held Item", function()
    CloneHeldItemToInventory()
end)

UI:CreateButton("Player", "Unload Script", function()
    -- Stop state loop if running
    if isStateLoopRunning then
        isStateLoopRunning = false
        if stateLoopThread then
            task.cancel(stateLoopThread)
        end
    end
    
    -- Clean up ESPs
    for _, data in pairs(AttachedESP) do
        if data.Label and data.Label.Parent then 
            data.Label.Parent:Destroy() 
        end
    end
    
    -- Destroy UI
    screenGui:Destroy()
    
    --print("✅ Script unloaded successfully!")
end)

-- Auto-refresh pets on startup
task.spawn(function()
    task.wait(1) -- Wait for modules to load
    pcall(function()
        refreshActivePets()
        
        -- Update panel canvas sizes for proper scrolling
        local leftPanel = tabs["Pet"] and tabs["Pet"].leftPanel
        if leftPanel then
            local leftList = tabs["Pet"].leftList
            if leftList then
                -- Wait for layout to update then set canvas size
                task.wait(0.1)
                leftPanel.CanvasSize = UDim2.new(0, 0, 0, leftList.AbsoluteContentSize.Y + 20)
            end
        end
        
        local middlePanel = tabs["Pet"] and tabs["Pet"].middlePanel
        if middlePanel then
            local middleList = tabs["Pet"].middleList
            if middleList then
                -- Wait for layout to update then set canvas size
                task.wait(0.1)
                middlePanel.CanvasSize = UDim2.new(0, 0, 0, middleList.AbsoluteContentSize.Y + 20)
            end
        end
        
        -- Connect refresh button functionality
        local refreshButton = tabs["Pet"] and tabs["Pet"].refreshButton
        if refreshButton then
            refreshButton.MouseButton1Click:Connect(function()
                refreshActivePets()
            end)
        end
    end)
end)

-- Enable Teleport UI
task.spawn(function()
    pcall(function()
        game:GetService("Players").LocalPlayer.PlayerGui.Teleport_UI.Frame.Gear.Visible = true
        game:GetService("Players").LocalPlayer.PlayerGui.Teleport_UI.Frame.Pets.Visible = true
    end)
end)

-- Keyboard shortcuts
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    
    if input.KeyCode == Enum.KeyCode.Insert then
        mainFrame.Visible = not mainFrame.Visible
    elseif input.KeyCode == Enum.KeyCode.K then
        cloneHighlightedModel()
       -- print("🔑 Clone keybinding pressed (K)")
    elseif input.KeyCode == Enum.KeyCode.C then
        CloneHeldItemToInventory()
       -- print("🔑 Inventory clone keybinding pressed (C)")
    end
end)

--// --- OPTIMIZATION: Central Update Loop ---
RunService.Heartbeat:Connect(function()
    if not espEnabled then return end

    local currentTime = tick()

    for eggInstance, data in pairs(AttachedESP) do
        if not eggInstance.Parent then
            if data.Label and data.Label.Parent then data.Label.Parent:Destroy() end
            AttachedESP[eggInstance] = nil
            continue
        end

        if not data.Label or not data.Label.Parent then
             AttachedESP[eggInstance] = nil
             continue
        end
        
        -- When egg hatches, reset to actual prediction once
        local timeLeft = eggInstance:GetAttribute("TimeToHatch") or 0
        if timeLeft <= 0 and not data.Hatched then
            data.DisplayIndex = -1
            data.Hatched = true
            updateEggLabel(eggInstance) -- Update label immediately
        end
        
        data.Label.Parent.Enabled = true

        if currentTime - data.LastUpdated > UPDATE_INTERVAL then
            -- Only update the timer text, the pet name is handled by the button
            updateEggLabel(eggInstance)
            data.LastUpdated = currentTime
        end
    end
end)

--// Detect new eggs added by the game
CollectionService:GetInstanceAddedSignal("PetEggServer"):Connect(AttachESPToEgg)

--// Optional cleanup (if egg is removed)
CollectionService:GetInstanceRemovedSignal("PetEggServer"):Connect(function(eggInstance)
    local data = AttachedESP[eggInstance]
    if data then
        if data.Label and data.Label.Parent then data.Label.Parent:Destroy() end
        AttachedESP[eggInstance] = nil
    end
end)

--// Initialize ESP on script start
task.wait(1) -- Wait for UI to load
refreshAllESPs()

--// --- PET MUTATION MACHINE ESP ---
local mutationESPEnabled = false
local AttachedMutationESP = {}

--// Function to get mutation machine data
local function GetMutationMachineData()
    local success, result = pcall(function()
        local data = DataService:GetData()
        return data and data.PetMutationMachine
    end)
    return success and result or nil
end

--// Function to get mutation registry data
local function GetMutationRegistry()
    local success, registry = pcall(function()
        return require(ReplicatedStorage.Data.PetRegistry.PetMutationRegistry)
    end)
    return success and registry or nil
end

--// Function to create ESP for mutation machine
local function CreateMutationESP(machineModel)
    if not machineModel or not machineModel.PrimaryPart then return end
    if machineModel:FindFirstChild("MutationESP") then return end

    local billboard = Instance.new("BillboardGui")
    billboard.Name = "MutationESP"
    billboard.Adornee = machineModel.PrimaryPart
    billboard.Size = UDim2.new(0, 200, 0, 120)
    billboard.StudsOffset = Vector3.new(0, 5, 0)
    billboard.AlwaysOnTop = true
    billboard.Parent = machineModel.PrimaryPart

    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1, 0, 1, 0)
    label.BackgroundTransparency = 1
    label.TextColor3 = Color3.fromRGB(255, 255, 255)
    label.TextStrokeTransparency = 0
    label.TextStrokeColor3 = Color3.new(0, 0, 0)
    label.Font = Enum.Font.GothamBold
    label.TextScaled = true
    label.RichText = true
    label.Text = "Loading..."
    label.Parent = billboard

    return label
end

--// Function to update mutation ESP label
local function updateMutationLabel(machineModel)
    local data = AttachedMutationESP[machineModel]
    if not data or not data.Label or not data.Label.Parent then return end

    local machineData = GetMutationMachineData()
    if not machineData then
        data.Label.Text = "<font color='rgb(255,100,100)'>No Machine Data</font>"
        return
    end

    local displayText = "<font color='rgb(100,255,255)'>MUTATION MACHINE</font>\n"

    if machineData.SubmittedPet then
        displayText = displayText .. "<font color='rgb(255,255,100)'>Pet: " .. tostring(machineData.SubmittedPet.PetType or "Unknown") .. "</font>\n"
        
        if machineData.TimeLeft and machineData.TimeLeft > 0 then
            -- Show timer and mutation odds
            local timeString = math.floor(machineData.TimeLeft) .. "s"
            displayText = displayText .. "<font color='rgb(255,200,100)'>Time: " .. timeString .. "</font>\n"
            
            -- Show top mutation possibilities
            local registry = GetMutationRegistry()
            if registry and registry.PetMutationRegistry then
                local topMutations = {}
                local totalChance = 0
                
                for petName, mutationData in pairs(registry.PetMutationRegistry) do
                    if mutationData.Chance and mutationData.Chance > 0 then
                        totalChance = totalChance + mutationData.Chance
                        table.insert(topMutations, {name = petName, chance = mutationData.Chance})
                    end
                end
                
                -- Sort by chance (highest first)
                table.sort(topMutations, function(a, b) return a.chance > b.chance end)
                
                -- Show top 2 possibilities
                for i = 1, math.min(2, #topMutations) do
                    local mutation = topMutations[i]
                    local percentage = math.floor((mutation.chance / totalChance) * 100)
                    displayText = displayText .. "<font color='rgb(150,255,150)'>" .. mutation.name .. " (" .. percentage .. "%)</font>\n"
                end
            else
                displayText = displayText .. "<font color='rgb(255,150,150)'>Calculating odds...</font>\n"
            end
            
        elseif machineData.PetReady then
            -- Show actual mutation result when ready
            displayText = displayText .. "<font color='rgb(100,255,100)'>READY TO CLAIM!</font>\n"
            
            -- Try to get the actual mutation result
            if machineData.MutatedPet then
                local mutatedPetName = tostring(machineData.MutatedPet.PetType or machineData.MutatedPet.Name or "Unknown Mutation")
                displayText = displayText .. "<font color='rgb(255,255,0)'>Result: " .. mutatedPetName .. "</font>\n"
                
                -- Calculate value if possible
                local petValue = getPetValue(mutatedPetName)
                if petValue > 0 then
                    displayText = displayText .. "<font color='rgb(100,255,255)'>Value: " .. tostring(petValue) .. "</font>"
                end
            elseif machineData.ResultPet then
                local resultPetName = tostring(machineData.ResultPet.PetType or machineData.ResultPet.Name or "Unknown Result")
                displayText = displayText .. "<font color='rgb(255,255,0)'>Result: " .. resultPetName .. "</font>\n"
                
                local petValue = getPetValue(resultPetName)
                if petValue > 0 then
                    displayText = displayText .. "<font color='rgb(100,255,255)'>Value: " .. tostring(petValue) .. "</font>"
                end
            else
                displayText = displayText .. "<font color='rgb(255,200,100)'>Mutation Complete!</font>"
            end
        else
            displayText = displayText .. "<font color='rgb(255,200,100)'>Processing...</font>"
        end
    else
        displayText = displayText .. "<font color='rgb(200,200,200)'>No Pet Submitted</font>"
    end

    data.Label.Text = displayText
end

--// Function to attach ESP to mutation machine
local function AttachESPToMutationMachine(machineModel)
    if not mutationESPEnabled or AttachedMutationESP[machineModel] then return end
    if not machineModel:IsA("Model") then return end

    local label = CreateMutationESP(machineModel)
    if not label then return end

    AttachedMutationESP[machineModel] = {
        Label = label,
        LastUpdated = 0
    }
    
    updateMutationLabel(machineModel)
end

--// Function to refresh all mutation ESPs
local function refreshAllMutationESPs()
    -- Safely iterate over AttachedMutationESP
    if AttachedMutationESP and type(AttachedMutationESP) == "table" then
        for _, data in pairs(AttachedMutationESP) do
            if data and data.Label and data.Label.Parent then 
                data.Label.Parent:Destroy() 
            end
        end
    end
    AttachedMutationESP = {}
    
    if mutationESPEnabled then
        local success, machines = pcall(function()
            -- Search for PetMutationMachine models in workspace
            local foundMachines = {}
            for _, obj in pairs(workspace:GetChildren()) do
                if obj.Name == "NewPetStand" and obj:IsA("Model") then
                    local mutationMachine = obj:FindFirstChild("PetMutationMachine")
                    if mutationMachine and mutationMachine:IsA("Model") then
                        table.insert(foundMachines, mutationMachine)
                        --print("🔍 Found PetMutationMachine in: " .. obj.Name)
                    end
                end
            end
            for _, obj in pairs(workspace:GetDescendants()) do
                if obj.Name == "PetMutationMachine" and obj:IsA("Model") then
                    local found = false
                    for _, existing in pairs(foundMachines) do
                        if existing == obj then found = true break end
                    end
                    if not found then 
                        table.insert(foundMachines, obj)
                       -- print("🔍 Found PetMutationMachine: " .. obj:GetFullName())
                    end
                end
            end
            return foundMachines
        end)
        
        if success and machines then
            for _, machineModel in ipairs(machines) do
                AttachESPToMutationMachine(machineModel)
            end
        else
           -- print("⚠️ Could not find PetMutationMachine objects")
        end
    end
end

--// Update loop for mutation ESP
task.spawn(function()
    while true do
        task.wait(UPDATE_INTERVAL)
        if mutationESPEnabled and AttachedMutationESP and type(AttachedMutationESP) == "table" then
            for machineModel, data in pairs(AttachedMutationESP) do
                if data and data.LastUpdated and tick() - data.LastUpdated >= UPDATE_INTERVAL then
                    updateMutationLabel(machineModel)
                    data.LastUpdated = tick()
                end
            end
        end
    end
end)

--// Listen for new mutation machines
CollectionService:GetInstanceAddedSignal("PetMutationMachine"):Connect(function(machineModel)
    if mutationESPEnabled then
        task.wait(0.1) -- Small delay to ensure model is fully loaded
        AttachESPToMutationMachine(machineModel)
    end
end)

--// Listen for removed mutation machines
CollectionService:GetInstanceRemovedSignal("PetMutationMachine"):Connect(function(machineModel)
    if AttachedMutationESP[machineModel] then
        if AttachedMutationESP[machineModel].Label and AttachedMutationESP[machineModel].Label.Parent then
            AttachedMutationESP[machineModel].Label.Parent:Destroy()
        end
        AttachedMutationESP[machineModel] = nil
    end
end)

--// Export functions for external use
getgenv().getSelectedPets = getSelectedPets
getgenv().refreshActivePets = refreshActivePets

--// Expected Mutation Display Code (ADD THIS TO updateMutationLabel function after timer line)
--[[
ADD THIS CODE IN updateMutationLabel function after line:
displayText = displayText .. "<font color='rgb(255,200,100)'>Time: " .. timeString .. "</font>\n"

            -- Show expected mutation from server data
            if machineData.ExpectedMutation then
                displayText = displayText .. "<font color='rgb(255,255,150)'>Expected: " .. tostring(machineData.ExpectedMutation) .. "</font>\n"
            elseif machineData.PredictedMutation then
                displayText = displayText .. "<font color='rgb(255,255,150)'>Expected: " .. tostring(machineData.PredictedMutation) .. "</font>\n"
            elseif machineData.MutationType then
                displayText = displayText .. "<font color='rgb(255,255,150)'>Expected: " .. tostring(machineData.MutationType) .. "</font>\n"
            elseif machineData.NextMutation then
                displayText = displayText .. "<font color='rgb(255,255,150)'>Expected: " .. tostring(machineData.NextMutation) .. "</font>\n"
            else
                -- Debug: Show mutation fields from server
                for key, value in pairs(machineData) do
                    if type(key) == "string" and key:lower():find("mut") and type(value) == "string" then
                        displayText = displayText .. "<font color='rgb(255,255,150)'>" .. key .. ": " .. tostring(value) .. "</font>\n"
                        break
                    end
                end
            end
--]]

-- Shop Variables
local selectedSeeds = {}
local selectedGear = {}
local selectedEggs = {}
local selectedTravellingItems = {}
local selectedCosmetics = {}
local autoBuyAllSeeds = false
local autoBuySelectedSeeds = false
local autoBuyAllGear = false
local autoBuySelectedGear = false
local autoBuyAllEggs = false
local autoBuySelectedEggs = false
local autoBuyAllTravelling = false
local autoBuySelectedTravelling = false
local autoBuyAllCosmetics = false

-- Load actual shop data from the game files
local function LoadShopData()
    local success, SeedData = pcall(function()
        return require(ReplicatedStorage.Data.SeedData)
    end)
    if not success then SeedData = {} end
    
    local success2, GearData = pcall(function()
        return require(ReplicatedStorage.Data.GearData)
    end)
    if not success2 then GearData = {} end
    
    local success3, EggData = pcall(function()
        return require(ReplicatedStorage.Data.PetEggData)
    end)
    if not success3 then EggData = {} end
    
    local success4, CosmeticItemData = pcall(function()
        return require(ReplicatedStorage.Data.CosmeticItemShopData)
    end)
    if not success4 then CosmeticItemData = {} end
    
    local success5, CosmeticCrateData = pcall(function()
        return require(ReplicatedStorage.Data.CosmeticCrateShopData)
    end)
    if not success5 then CosmeticCrateData = {} end
    
    -- Merge cosmetic data
    local CosmeticData = {}
    for k, v in pairs(CosmeticItemData) do
        CosmeticData[k] = v
    end
    for k, v in pairs(CosmeticCrateData) do
        CosmeticData[k] = v
    end
    
    return SeedData, GearData, EggData, CosmeticData
end

local SeedData, GearData, EggData, CosmeticData = LoadShopData()

-- Function to create collapsible panel
local function CreateCollapsiblePanel(parent, title, isExpanded)
    local panel = Instance.new("Frame")
    panel.Size = UDim2.new(1, 0, 0, 40)
    panel.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    panel.BorderSizePixel = 0
    panel.Parent = parent
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 6)
    corner.Parent = panel
    
    local header = Instance.new("TextButton")
    header.Size = UDim2.new(1, 0, 0, 40)
    header.BackgroundTransparency = 1
    header.Text = (isExpanded and "▼ " or "▶ ") .. title
    header.TextColor3 = Color3.fromRGB(255, 255, 255)
    header.TextSize = 16
    header.Font = Enum.Font.GothamBold
    header.TextXAlignment = Enum.TextXAlignment.Left
    header.Parent = panel
    
    local headerPadding = Instance.new("UIPadding")
    headerPadding.PaddingLeft = UDim.new(0, 15)
    headerPadding.Parent = header
    
    local content = Instance.new("Frame")
    content.Size = UDim2.new(1, 0, 0, 0)
    content.Position = UDim2.new(0, 0, 0, 40)
    content.BackgroundTransparency = 1
    content.Visible = isExpanded
    content.Parent = panel
    
    local contentList = Instance.new("UIListLayout")
    contentList.SortOrder = Enum.SortOrder.LayoutOrder
    contentList.Padding = UDim.new(0, 5)
    contentList.Parent = content
    
    local contentPadding = Instance.new("UIPadding")
    contentPadding.PaddingLeft = UDim.new(0, 20)
    contentPadding.PaddingRight = UDim.new(0, 20)
    contentPadding.PaddingTop = UDim.new(0, 10)
    contentPadding.PaddingBottom = UDim.new(0, 10)
    contentPadding.Parent = content
    
    local expanded = isExpanded
    
    header.MouseButton1Click:Connect(function()
        expanded = not expanded
        content.Visible = expanded
        header.Text = (expanded and "▼ " or "▶ ") .. title
        
        if expanded then
            panel.Size = UDim2.new(1, 0, 0, 40 + content.AbsoluteSize.Y + 20)
        else
            panel.Size = UDim2.new(1, 0, 0, 40)
        end
    end)
    
    contentList:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        content.Size = UDim2.new(1, 0, 0, contentList.AbsoluteContentSize.Y)
        if expanded then
            panel.Size = UDim2.new(1, 0, 0, 40 + contentList.AbsoluteContentSize.Y + 20)
        end
    end)
    
    return panel, content
end

-- Function to create multiselect combobox
local function CreateMultiSelectCombobox(parent, title, options, selectedTable)
    local container = Instance.new("Frame")
    container.Size = UDim2.new(1, 0, 0, 30)
    container.BackgroundTransparency = 1
    container.Parent = parent
    
    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(0.3, 0, 1, 0)
    label.BackgroundTransparency = 1
    label.Text = title
    label.TextColor3 = Color3.fromRGB(255, 255, 255)
    label.TextSize = 14
    label.Font = Enum.Font.Gotham
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Parent = container
    
    local dropdown = Instance.new("TextButton")
    dropdown.Size = UDim2.new(0.7, 0, 1, 0)
    dropdown.Position = UDim2.new(0.3, 0, 0, 0)
    dropdown.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    dropdown.BorderSizePixel = 0
    dropdown.Text = "Select Items..."
    dropdown.TextColor3 = Color3.fromRGB(255, 255, 255)
    dropdown.TextSize = 12
    dropdown.Font = Enum.Font.Gotham
    dropdown.Parent = container
    
    local dropdownCorner = Instance.new("UICorner")
    dropdownCorner.CornerRadius = UDim.new(0, 4)
    dropdownCorner.Parent = dropdown
    
    local dropdownList = Instance.new("ScrollingFrame")
    dropdownList.Size = UDim2.new(1, 0, 0, 150)
    dropdownList.Position = UDim2.new(0, 0, 1, 2)
    dropdownList.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
    dropdownList.BorderSizePixel = 0
    dropdownList.Visible = false
    dropdownList.ScrollBarThickness = 6
    dropdownList.ZIndex = 1000 -- High z-index to appear in front
    dropdownList.ScrollingEnabled = true
    dropdownList.CanvasSize = UDim2.new(0, 0, 0, 0) -- Will be set by layout
    dropdownList.Parent = dropdown
    
    local listCorner = Instance.new("UICorner")
    listCorner.CornerRadius = UDim.new(0, 4)
    listCorner.Parent = dropdownList
    
    local listLayout = Instance.new("UIListLayout")
    listLayout.SortOrder = Enum.SortOrder.LayoutOrder
    listLayout.Parent = dropdownList
    
    local function updateDropdownText()
        local selectedCount = 0
        for _ in pairs(selectedTable) do
            selectedCount = selectedCount + 1
        end
        
        if selectedCount == 0 then
            dropdown.Text = "Select Items..."
        else
            dropdown.Text = selectedCount .. " item(s) selected"
        end
    end
    
    for itemName, itemData in pairs(options) do
        local option = Instance.new("TextButton")
        option.Size = UDim2.new(1, 0, 0, 30)
        option.BackgroundColor3 = Color3.fromRGB(55, 55, 55)
        option.BorderSizePixel = 0
        option.Text = "☐ " .. (itemData.SeedName or itemData.GearName or itemData.EggName or itemName)
        option.TextColor3 = Color3.fromRGB(255, 255, 255)
        option.TextSize = 12
        option.Font = Enum.Font.Gotham
        option.TextXAlignment = Enum.TextXAlignment.Left
        option.ZIndex = 1001 -- Higher z-index than dropdown
        option.Parent = dropdownList
        
        local optionPadding = Instance.new("UIPadding")
        optionPadding.PaddingLeft = UDim.new(0, 10)
        optionPadding.Parent = option
        
        option.MouseButton1Click:Connect(function()
            if selectedTable[itemName] then
                selectedTable[itemName] = nil
                option.Text = "☐ " .. (itemData.SeedName or itemData.GearName or itemData.EggName or itemName)
                option.BackgroundColor3 = Color3.fromRGB(55, 55, 55)
            else
                selectedTable[itemName] = itemData
                option.Text = "☑ " .. (itemData.SeedName or itemData.GearName or itemData.EggName or itemName)
                option.BackgroundColor3 = Color3.fromRGB(70, 130, 180)
            end
            updateDropdownText()
        end)
    end
    
    dropdown.MouseButton1Click:Connect(function()
        dropdownList.Visible = not dropdownList.Visible
    end)
    
    listLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        dropdownList.CanvasSize = UDim2.new(0, 0, 0, listLayout.AbsoluteContentSize.Y)
    end)
    
    return container
end

-- Function to create toggle
local function CreateShopToggle(parent, text, callback)
    local container = Instance.new("Frame")
    container.Size = UDim2.new(1, 0, 0, 30)
    container.BackgroundTransparency = 1
    container.Parent = parent
    
    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(0.7, 0, 1, 0)
    label.BackgroundTransparency = 1
    label.Text = text
    label.TextColor3 = Color3.fromRGB(255, 255, 255)
    label.TextSize = 14
    label.Font = Enum.Font.Gotham
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Parent = container
    
    local toggle = Instance.new("TextButton")
    toggle.Size = UDim2.new(0, 50, 0, 25)
    toggle.Position = UDim2.new(0.7, 0, 0, 5)
    toggle.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    toggle.BorderSizePixel = 0
    toggle.Text = "OFF"
    toggle.TextColor3 = Color3.fromRGB(255, 255, 255)
    toggle.TextSize = 12
    toggle.Font = Enum.Font.GothamBold
    toggle.Parent = container
    
    local toggleCorner = Instance.new("UICorner")
    toggleCorner.CornerRadius = UDim.new(0, 12)
    toggleCorner.Parent = toggle
    
    local enabled = false
    
    toggle.MouseButton1Click:Connect(function()
        enabled = not enabled
        if enabled then
            toggle.BackgroundColor3 = Color3.fromRGB(0, 170, 0)
            toggle.Text = "ON"
        else
            toggle.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
            toggle.Text = "OFF"
        end
        callback(enabled)
    end)
    
    return container
end

-- Shop buying functions using proper game events
local function GetItemStock(itemName, shopType)
    local success, stock = pcall(function()
        local data = DataService:GetData()
        if not data then return 0 end
        
        if shopType == "seed" and data.SeedStock and data.SeedStock.Stocks then
            local stockData = data.SeedStock.Stocks[itemName]
            return stockData and stockData.Stock or 0
        elseif shopType == "gear" and data.GearStock and data.GearStock.Stocks then
            local stockData = data.GearStock.Stocks[itemName]
            return stockData and stockData.Stock or 0
        elseif shopType == "egg" then
            -- Eggs typically don't have stock limits, return 1
            return 1
        end
        return 0
    end)
    
    return success and stock or 0
end

local function BuySeed(seedName, buyAll)
    local stock = buyAll and GetItemStock(seedName, "seed") or 1
    if stock <= 0 then
       -- print("❌ No stock available for seed: " .. seedName)
        return
    end
    
   -- print("🌱 Buying " .. stock .. "x " .. seedName .. " seed(s)")
    
    for i = 1, stock do
        local success = pcall(function()
            if ReplicatedStorage:FindFirstChild("GameEvents") and ReplicatedStorage.GameEvents:FindFirstChild("BuySeedStock") then
                ReplicatedStorage.GameEvents.BuySeedStock:FireServer(seedName)
            else
               -- print("❌ BuySeedStock event not found")
            end
        end)
        
        if not success then
            --print("❌ Failed to buy seed: " .. seedName .. " (" .. i .. "/" .. stock .. ")")
            break
        end
        
        if i < stock then
            task.wait(0.2) -- Small delay between individual purchases
        end
    end
end

local function BuyGear(gearName, buyAll)
    local stock = buyAll and GetItemStock(gearName, "gear") or 1
    if stock <= 0 then
        --print("❌ No stock available for gear: " .. gearName)
        return
    end
    
    --print("⚙️ Buying " .. stock .. "x " .. gearName .. " gear(s)")
    
    for i = 1, stock do
        local success = pcall(function()
            if ReplicatedStorage:FindFirstChild("GameEvents") and ReplicatedStorage.GameEvents:FindFirstChild("BuyGearStock") then
                ReplicatedStorage.GameEvents.BuyGearStock:FireServer(gearName)
            else
                --print("❌ BuyGearStock event not found")
            end
        end)
        
        if not success then
            --print("❌ Failed to buy gear: " .. gearName .. " (" .. i .. "/" .. stock .. ")")
            break
        end
        
        if i < stock then
            task.wait(0.2) -- Small delay between individual purchases
        end
    end
end

local function BuyEgg(eggName, buyAll)
    -- Eggs are typically unlimited, so just buy once unless buyAll is specified
    local count = buyAll and 5 or 1 -- Buy 5 if buyAll, otherwise 1
    
    --print("🥚 Buying " .. count .. "x " .. eggName .. " egg(s)")
    
    for i = 1, count do
        local success = pcall(function()
            if ReplicatedStorage:FindFirstChild("GameEvents") and ReplicatedStorage.GameEvents:FindFirstChild("BuyPetEgg") then
                ReplicatedStorage.GameEvents.BuyPetEgg:FireServer(eggName)
            else
                --print("❌ BuyPetEgg event not found")
            end
        end)
        
        if not success then
            --print("❌ Failed to buy egg: " .. eggName .. " (" .. i .. "/" .. count .. ")")
            break
        end
        
        if i < count then
            task.wait(0.2) -- Small delay between individual purchases
        end
    end
end

local function BuyCosmetic(cosmeticName, isCrate)
    local success = pcall(function()
        if ReplicatedStorage:FindFirstChild("GameEvents") then
            if isCrate and ReplicatedStorage.GameEvents:FindFirstChild("BuyCosmeticCrate") then
                ReplicatedStorage.GameEvents.BuyCosmeticCrate:FireServer(cosmeticName)
               -- print("🎨 Buying cosmetic crate: " .. cosmeticName)
            elseif ReplicatedStorage.GameEvents:FindFirstChild("BuyCosmeticItem") then
                ReplicatedStorage.GameEvents.BuyCosmeticItem:FireServer(cosmeticName)
               -- print("🎨 Buying cosmetic item: " .. cosmeticName)
            else
               -- print("❌ Cosmetic buy events not found")
            end
        end
    end)
    
    if not success then
       -- print("❌ Failed to buy cosmetic: " .. cosmeticName)
    end
end

local function BuySelectedSeeds()
    for itemName, itemData in pairs(selectedSeeds) do
        BuySeed(itemName, true) -- Buy all available stock
        task.wait(1) -- Longer delay between different items
    end
end

local function BuyAllSeeds()
    for itemName, itemData in pairs(SeedData) do
        if itemData.DisplayInShop then
            BuySeed(itemName, true) -- Buy all available stock
            task.wait(1) -- Longer delay between different items
        end
    end
end

local function BuySelectedGear()
    for itemName, itemData in pairs(selectedGear) do
        BuyGear(itemName, true) -- Buy all available stock
        task.wait(1) -- Longer delay between different items
    end
end

local function BuyAllGear()
    for itemName, itemData in pairs(GearData) do
        if itemData.DisplayInShop then
            BuyGear(itemName, true) -- Buy all available stock
            task.wait(1) -- Longer delay between different items
        end
    end
end

local function BuySelectedEggs()
    for itemName, itemData in pairs(selectedEggs) do
        BuyEgg(itemName, true) -- Buy multiple eggs
        task.wait(1) -- Longer delay between different items
    end
end

local function BuyAllEggs()
    for itemName, itemData in pairs(EggData) do
        BuyEgg(itemName, true) -- Buy multiple eggs
        task.wait(1) -- Longer delay between different items
    end
end

local function BuySelectedCosmetics()
    for itemName, itemData in pairs(selectedCosmetics) do
        local isCrate = itemData.CrateName ~= nil
        BuyCosmetic(itemName, isCrate)
        task.wait(0.5)
    end
end

local function BuyAllCosmetics()
    for itemName, itemData in pairs(CosmeticData) do
        local isCrate = itemData.CrateName ~= nil
        BuyCosmetic(itemName, isCrate)
        task.wait(0.5)
    end
end

local function BuySelectedTravelling()
    for itemName, itemData in pairs(selectedTravellingItems) do
        -- Travelling merchant items would use specific events based on merchant type
       -- print("🛒 Buying travelling item: " .. itemName)
        task.wait(0.5)
    end
end

local function BuyAllTravelling()
   -- print("🛒 Buy All Travelling Merchant items (merchant detection needed)")
end

-- Auto-buy state tracking
local autoBuyState = {
    seedFailCount = 0,
    gearFailCount = 0,
    eggFailCount = 0,
    cosmeticFailCount = 0,
    travellingFailCount = 0,
    seedWaitingForRestock = false,
    gearWaitingForRestock = false,
    eggWaitingForRestock = false,
    cosmeticWaitingForRestock = false,
    travellingWaitingForRestock = false
}

-- Function to get next restock time (1 minute after next 5-minute mark)
local function GetNextRestockBuyTime()
    local currentTime = os.time()
    local currentDate = os.date("*t", currentTime)
    
    -- Calculate minutes since start of hour
    local minutesSinceHour = currentDate.min
    
    -- Find next 5-minute mark
    local nextFiveMinMark = math.ceil(minutesSinceHour / 5) * 5
    if nextFiveMinMark == minutesSinceHour then
        nextFiveMinMark = nextFiveMinMark + 5 -- If we're exactly on a 5-min mark, go to next
    end
    
    -- If next mark would be 60 or more, wrap to next hour
    if nextFiveMinMark >= 60 then
        nextFiveMinMark = 0
        currentDate.hour = currentDate.hour + 1
        if currentDate.hour >= 24 then
            currentDate.hour = 0
            currentDate.day = currentDate.day + 1
        end
    end
    
    -- Set the target time (1 minute after restock)
    currentDate.min = nextFiveMinMark + 1
    currentDate.sec = 0
    
    return os.time(currentDate)
end

-- Function to check if it's time to buy after restock
local function IsTimeToRetryAfterRestock(shopType)
    local stateKey = shopType .. "WaitingForRestock"
    if not autoBuyState[stateKey] then return true end
    
    local currentTime = os.time()
    local nextBuyTime = GetNextRestockBuyTime()
    
    if currentTime >= nextBuyTime then
        autoBuyState[stateKey] = false
        autoBuyState[shopType .. "FailCount"] = 0
        --print("🕐 Restock time reached for " .. shopType .. ", resuming auto-buy")
        return true
    end
    
    return false
end

-- Enhanced buying functions with stock monitoring
local function TryAutoBuySeeds()
    if autoBuyState.seedWaitingForRestock and not IsTimeToRetryAfterRestock("seed") then
        return
    end
    
    local hadStock = false
    
    if autoBuyAllSeeds then
        for itemName, itemData in pairs(SeedData) do
            if itemData.DisplayInShop then
                local stock = GetItemStock(itemName, "seed")
                if stock > 0 then
                    hadStock = true
                    BuySeed(itemName, true)
                    task.wait(0.1) -- Small delay between items
                end
            end
        end
    elseif autoBuySelectedSeeds then
        for itemName, itemData in pairs(selectedSeeds) do
            local stock = GetItemStock(itemName, "seed")
            if stock > 0 then
                hadStock = true
                BuySeed(itemName, true)
                task.wait(0.1) -- Small delay between items
            end
        end
    end
    
    if not hadStock then
        autoBuyState.seedFailCount = autoBuyState.seedFailCount + 1
        if autoBuyState.seedFailCount >= 10 then
            autoBuyState.seedWaitingForRestock = true
            local nextBuyTime = GetNextRestockBuyTime()
            local timeStr = os.date("%H:%M:%S", nextBuyTime)
            --print("🌱 No seed stock after 10 attempts, waiting until " .. timeStr)
        end
    else
        autoBuyState.seedFailCount = 0
    end
end

local function TryAutoBuyGear()
    if autoBuyState.gearWaitingForRestock and not IsTimeToRetryAfterRestock("gear") then
        return
    end
    
    local hadStock = false
    
    if autoBuyAllGear then
        for itemName, itemData in pairs(GearData) do
            if itemData.DisplayInShop then
                local stock = GetItemStock(itemName, "gear")
                if stock > 0 then
                    hadStock = true
                    BuyGear(itemName, true)
                    task.wait(0.1) -- Small delay between items
                end
            end
        end
    elseif autoBuySelectedGear then
        for itemName, itemData in pairs(selectedGear) do
            local stock = GetItemStock(itemName, "gear")
            if stock > 0 then
                hadStock = true
                BuyGear(itemName, true)
                task.wait(0.1) -- Small delay between items
            end
        end
    end
    
    if not hadStock then
        autoBuyState.gearFailCount = autoBuyState.gearFailCount + 1
        if autoBuyState.gearFailCount >= 10 then
            autoBuyState.gearWaitingForRestock = true
            local nextBuyTime = GetNextRestockBuyTime()
            local timeStr = os.date("%H:%M:%S", nextBuyTime)
            --print("⚙️ No gear stock after 10 attempts, waiting until " .. timeStr)
        end
    else
        autoBuyState.gearFailCount = 0
    end
end

local function TryAutoBuyEggs()
    if autoBuyAllEggs then
        BuyAllEggs()
    elseif autoBuySelectedEggs then
        BuySelectedEggs()
    end
end

local function TryAutoBuyCosmetics()
    if autoBuyAllCosmetics then
        BuyAllCosmetics()
    elseif selectedCosmetics and next(selectedCosmetics) then
        BuySelectedCosmetics()
    end
end

local function TryAutoBuyTravelling()
    if autoBuyAllTravelling then
        BuyAllTravelling()
    elseif autoBuySelectedTravelling then
        BuySelectedTravelling()
    end
end

-- Auto-buy loops with smart timing
local function StartAutoBuyLoop()
    task.spawn(function()
        while true do
            task.wait(0.5) -- Check every 0.5 seconds as requested
            
            -- Try auto-buy for each category
            if autoBuyAllSeeds or autoBuySelectedSeeds then
                TryAutoBuySeeds()
            end
            
            if autoBuyAllGear or autoBuySelectedGear then
                TryAutoBuyGear()
            end
            
            if autoBuyAllEggs or autoBuySelectedEggs then
                TryAutoBuyEggs()
            end
            
            if autoBuyAllTravelling or autoBuySelectedTravelling then
                TryAutoBuyTravelling()
            end
            
            if autoBuyAllCosmetics or (selectedCosmetics and next(selectedCosmetics)) then
                TryAutoBuyCosmetics()
            end
        end
    end)
end

-- Create 2-column layout for shop tab
local shopContent = tabs["Shop"].content

-- Column 1 (Left) - Seeds and Gear
local column1 = Instance.new("Frame")
column1.Size = UDim2.new(0.48, 0, 1, 0)
column1.Position = UDim2.new(0, 0, 0, 0)
column1.BackgroundTransparency = 1
column1.Parent = shopContent

local column1List = Instance.new("UIListLayout")
column1List.SortOrder = Enum.SortOrder.LayoutOrder
column1List.Padding = UDim.new(0, 10)
column1List.Parent = column1

-- Column 2 (Right) - Eggs, Travelling Merchant, Cosmetics
local column2 = Instance.new("Frame")
column2.Size = UDim2.new(0.48, 0, 1, 0)
column2.Position = UDim2.new(0.52, 0, 0, 0)
column2.BackgroundTransparency = 1
column2.Parent = shopContent

local column2List = Instance.new("UIListLayout")
column2List.SortOrder = Enum.SortOrder.LayoutOrder
column2List.Padding = UDim.new(0, 10)
column2List.Parent = column2

-- Clear default list layout for Shop tab
if shopContent:FindFirstChild("UIListLayout") then
    shopContent:FindFirstChild("UIListLayout"):Destroy()
end

-- COLUMN 1 PANELS

-- Seed Shop Panel (Column 1)
local seedPanel, seedContent = CreateCollapsiblePanel(column1, "Seed Shop", true)
-- Filter seeds that are displayable in shop
local displayableSeeds = {}
for itemName, itemData in pairs(SeedData) do
    if itemData.DisplayInShop then
        displayableSeeds[itemName] = itemData
    end
end
CreateMultiSelectCombobox(seedContent, "Seeds:", displayableSeeds, selectedSeeds)
CreateShopToggle(seedContent, "Auto Buy All Seeds", function(enabled)
    autoBuyAllSeeds = enabled
    if enabled then autoBuySelectedSeeds = false end
end)
CreateShopToggle(seedContent, "Auto Buy Selected Seeds", function(enabled)
    autoBuySelectedSeeds = enabled
    if enabled then autoBuyAllSeeds = false end
end)

-- Gear Shop Panel (Column 1)
local gearPanel, gearContent = CreateCollapsiblePanel(column1, "Gear Shop", false)
-- Filter gear that are displayable in shop
local displayableGear = {}
for itemName, itemData in pairs(GearData) do
    if itemData.DisplayInShop then
        displayableGear[itemName] = itemData
    end
end
CreateMultiSelectCombobox(gearContent, "Gear:", displayableGear, selectedGear)
CreateShopToggle(gearContent, "Auto Buy All Gear", function(enabled)
    autoBuyAllGear = enabled
    if enabled then autoBuySelectedGear = false end
end)
CreateShopToggle(gearContent, "Auto Buy Selected Gear", function(enabled)
    autoBuySelectedGear = enabled
    if enabled then autoBuyAllGear = false end
end)

-- COLUMN 2 PANELS

-- Egg Shop Panel (Column 2)
local eggPanel, eggContent = CreateCollapsiblePanel(column2, "Egg Shop", false)
CreateMultiSelectCombobox(eggContent, "Eggs:", EggData, selectedEggs)
CreateShopToggle(eggContent, "Auto Buy All Eggs", function(enabled)
    autoBuyAllEggs = enabled
    if enabled then autoBuySelectedEggs = false end
end)
CreateShopToggle(eggContent, "Auto Buy Selected Eggs", function(enabled)
    autoBuySelectedEggs = enabled
    if enabled then autoBuyAllEggs = false end
end)

-- Travelling Merchant Panel (Column 2)
local travellingPanel, travellingContent = CreateCollapsiblePanel(column2, "Travelling Merchant", false)
local travellingLabel = Instance.new("TextLabel")
travellingLabel.Size = UDim2.new(1, 0, 0, 25)
travellingLabel.BackgroundTransparency = 1
travellingLabel.Text = "Merchant Type: Detecting..."
travellingLabel.TextColor3 = Color3.fromRGB(255, 255, 150)
travellingLabel.TextSize = 12
travellingLabel.Font = Enum.Font.Gotham
travellingLabel.TextXAlignment = Enum.TextXAlignment.Left
travellingLabel.Parent = travellingContent

CreateShopToggle(travellingContent, "Auto Buy All Travelling Items", function(enabled)
    autoBuyAllTravelling = enabled
    if enabled then autoBuySelectedTravelling = false end
end)
CreateShopToggle(travellingContent, "Auto Buy Selected Travelling Items", function(enabled)
    autoBuySelectedTravelling = enabled
    if enabled then autoBuyAllTravelling = false end
end)

-- Cosmetic Shop Panel (Column 2)
local cosmeticPanel, cosmeticContent = CreateCollapsiblePanel(column2, "Cosmetic Shop", false)
CreateMultiSelectCombobox(cosmeticContent, "Cosmetics:", CosmeticData, selectedCosmetics)
CreateShopToggle(cosmeticContent, "Auto Buy All Cosmetics", function(enabled)
    autoBuyAllCosmetics = enabled
end)

-- Manual buy buttons (distributed across columns)
local manualButtonsColumn1 = Instance.new("Frame")
manualButtonsColumn1.Size = UDim2.new(1, 0, 0, 80)
manualButtonsColumn1.BackgroundTransparency = 1
manualButtonsColumn1.Parent = column1

local manualButtonsColumn2 = Instance.new("Frame")
manualButtonsColumn2.Size = UDim2.new(1, 0, 0, 80)
manualButtonsColumn2.BackgroundTransparency = 1
manualButtonsColumn2.Parent = column2

local buttonList1 = Instance.new("UIListLayout")
buttonList1.SortOrder = Enum.SortOrder.LayoutOrder
buttonList1.Padding = UDim.new(0, 5)
buttonList1.Parent = manualButtonsColumn1

local buttonList2 = Instance.new("UIListLayout")
buttonList2.SortOrder = Enum.SortOrder.LayoutOrder
buttonList2.Padding = UDim.new(0, 5)
buttonList2.Parent = manualButtonsColumn2

-- Column 1 manual buttons
local function CreateManualButton(parent, text, callback)
    local button = Instance.new("TextButton")
    button.Size = UDim2.new(1, 0, 0, 28)
    button.BackgroundColor3 = Color3.fromRGB(70, 130, 180)
    button.BorderSizePixel = 0
    button.Text = text
    button.TextColor3 = Color3.fromRGB(255, 255, 255)
    button.TextSize = 11
    button.Font = Enum.Font.GothamBold
    button.Parent = parent
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 6)
    corner.Parent = button
    
    button.MouseButton1Click:Connect(callback)
    return button
end

CreateManualButton(manualButtonsColumn1, "Buy Selected Seeds", function()
    BuySelectedSeeds()
end)

CreateManualButton(manualButtonsColumn1, "Buy Selected Gear", function()
    BuySelectedGear()
end)

-- Column 2 manual buttons
CreateManualButton(manualButtonsColumn2, "Buy Selected Eggs", function()
    BuySelectedEggs()
end)

CreateManualButton(manualButtonsColumn2, "Buy Selected Cosmetics", function()
    BuySelectedCosmetics()
end)

-- Start the auto-buy loop
StartAutoBuyLoop()
local refreshButton1 = Instance.new("TextButton")
        refreshButton1.Size = UDim2.new(1, 0, 0, 32)
        refreshButton1.Position = UDim2.new(0, 0, 0, 0)
        refreshButton1.BackgroundColor3 = Color3.fromRGB(255, 70, 70)
        refreshButton1.Text = "Reroll"
        refreshButton1.TextColor3 = Color3.fromRGB(255, 255, 255)
        refreshButton1.TextSize = 14
        refreshButton1.Font = Enum.Font.Gotham
        refreshButton1.BorderSizePixel = 0
        refreshButton1.Parent = sidebar

        local refreshCorner1 = Instance.new("UICorner")
        refreshCorner1.CornerRadius = UDim.new(0, 8)
        refreshCorner1.Parent = refreshButton1

        refreshButton1.MouseButton1Click:Connect(function()
            performReroll()
        end)
--print("🛒 Shop UI loaded successfully!")
